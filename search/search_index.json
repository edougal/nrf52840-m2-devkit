{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nRF52840 M.2 Developer Kit An open-source developer kit based on a removable nRF52840 M.2 module, designed for IoT prototyping \u00b6 Description \u00b6 nRF52840 M.2 Developer Kit is a versatile IoT prototyping platform, including the nRF52840 M.2 Module and M.2 Dock . You can use the developer kit to prototype your IoT products and then scale to production faster using the nRF52840 M.2 Module combined with your custom PCB hardware. The nRF52840 M.2 Module is a removable M.2 E-Key form factor module for Bluetooth Low Energy, Bluetooth mesh, Thread, Zigbee, 802.15.4, ANT and 2.4 GHz proprietary applications on the nRF52840 SoC. The M.2 Dock extends the interfaces compared to the nRF52840 M.2 Module through an M.2 E-Key connector. This design also features a fully-integrated DAPLink debugger with Power Profiling , enabling you to program, debug and perform real-time current profiling of your IoT applications without using external tools. Key Features \u00b6 nRF52840 M.2 Module Nordic Semiconductor nRF52840 SoC 64 MHz Arm\u00ae Cortex-M4 with FPU, 1 MB Flash + 256 KB RAM Bluetooth 5, Bluetooth mesh, Thread, Zigbee, 802.15.4, ANT and 2.4 GHz proprietary Arm TrustZone\u00ae Cryptocell 310 Security Subsystem M.2 Key-E with USB 2.0, UART, SPI, TWI, PDM, I2S, PWM, ADC and up to 33 GPIOs User programmable RGB LED Ultra low power 64Mbit QSPI flash memory U.FL/I-PEX MHF Antenna Connectors Integrated DAPLink Debugger MSC - drag-n-drop programming flash memory CDC - virtual com port for log, trace and terminal emulation HID/WEBUSB HID - CMSIS-DAP compliant debug channel Advanced Power Profiling Up to 690 mA current measurement Voltage tracking 30000 samples per second Precision amplifiers with dual gain stage Cross-platform utility available in Python Shipped with Python Interpreter firmware 1.3\" 240x240 Color IPS TFT LCD Display Li-Po Battery Charger with Power Path Management User programmable LED and Button 2.4 GHz and NFC cabled PCB Antennas microSD Card Slot Arduino Form Factor 4 Grove Connectors Reversible USB-C Connectors Hardware Diagram \u00b6 The hardware diagram of the nRF52840 M.2 Developer Kit is shown below: Included in the Box \u00b6 Part Qty nRF52840 M.2 Module 1 M.2 Dock 1 2.4 GHz Cabled PCB Antenna 1 NFC Cabled PCB Antenna 1 USB-C Cable 1 Tutorials \u00b6 We think the best way to learn is by doing. And to help you get started, we have provided a series of tutorials. Find the details below: Getting Started with the nRF52840 M.2 Developer Kit How to Program the nRF52840 M.2 Module Getting Started with Power Profiling Python Tutorials nRF5 SDK Tutorials Zephyr OS Tutorials Design Resource \u00b6 nRF52840 M.2 Developer Kit Hardware Diagram V1.0 nRF52840 M.2 Developer Kit 3D Model V1.0 nRF52840 M.2 Module Documentation M.2 Dock Documentation Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Introduction"},{"location":"#nrf52840-m2-developer-kitan-open-source-developer-kit-based-on-a-removable-nrf52840-m2-module-designed-for-iot-prototyping","text":"","title":"nRF52840 M.2 Developer KitAn open-source developer kit based on a removable nRF52840 M.2 module, designed for IoT prototyping"},{"location":"#description","text":"nRF52840 M.2 Developer Kit is a versatile IoT prototyping platform, including the nRF52840 M.2 Module and M.2 Dock . You can use the developer kit to prototype your IoT products and then scale to production faster using the nRF52840 M.2 Module combined with your custom PCB hardware. The nRF52840 M.2 Module is a removable M.2 E-Key form factor module for Bluetooth Low Energy, Bluetooth mesh, Thread, Zigbee, 802.15.4, ANT and 2.4 GHz proprietary applications on the nRF52840 SoC. The M.2 Dock extends the interfaces compared to the nRF52840 M.2 Module through an M.2 E-Key connector. This design also features a fully-integrated DAPLink debugger with Power Profiling , enabling you to program, debug and perform real-time current profiling of your IoT applications without using external tools.","title":"Description"},{"location":"#key-features","text":"nRF52840 M.2 Module Nordic Semiconductor nRF52840 SoC 64 MHz Arm\u00ae Cortex-M4 with FPU, 1 MB Flash + 256 KB RAM Bluetooth 5, Bluetooth mesh, Thread, Zigbee, 802.15.4, ANT and 2.4 GHz proprietary Arm TrustZone\u00ae Cryptocell 310 Security Subsystem M.2 Key-E with USB 2.0, UART, SPI, TWI, PDM, I2S, PWM, ADC and up to 33 GPIOs User programmable RGB LED Ultra low power 64Mbit QSPI flash memory U.FL/I-PEX MHF Antenna Connectors Integrated DAPLink Debugger MSC - drag-n-drop programming flash memory CDC - virtual com port for log, trace and terminal emulation HID/WEBUSB HID - CMSIS-DAP compliant debug channel Advanced Power Profiling Up to 690 mA current measurement Voltage tracking 30000 samples per second Precision amplifiers with dual gain stage Cross-platform utility available in Python Shipped with Python Interpreter firmware 1.3\" 240x240 Color IPS TFT LCD Display Li-Po Battery Charger with Power Path Management User programmable LED and Button 2.4 GHz and NFC cabled PCB Antennas microSD Card Slot Arduino Form Factor 4 Grove Connectors Reversible USB-C Connectors","title":"Key Features"},{"location":"#hardware-diagram","text":"The hardware diagram of the nRF52840 M.2 Developer Kit is shown below:","title":"Hardware Diagram"},{"location":"#included-in-the-box","text":"Part Qty nRF52840 M.2 Module 1 M.2 Dock 1 2.4 GHz Cabled PCB Antenna 1 NFC Cabled PCB Antenna 1 USB-C Cable 1","title":"Included in the Box"},{"location":"#tutorials","text":"We think the best way to learn is by doing. And to help you get started, we have provided a series of tutorials. Find the details below: Getting Started with the nRF52840 M.2 Developer Kit How to Program the nRF52840 M.2 Module Getting Started with Power Profiling Python Tutorials nRF5 SDK Tutorials Zephyr OS Tutorials","title":"Tutorials"},{"location":"#design-resource","text":"nRF52840 M.2 Developer Kit Hardware Diagram V1.0 nRF52840 M.2 Developer Kit 3D Model V1.0 nRF52840 M.2 Module Documentation M.2 Dock Documentation","title":"Design Resource"},{"location":"#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"CONTRIBUTING/","text":"Contributing \u00b6 Interested in contributing to nRF52840 M.2 Developer Kit ? Want to report a bug? Before you do, please read the following guidelines. Got a question or problem? \u00b6 For quick questions there's no need to open an issue as you can reach us on makerdiary/community . Found a bug? \u00b6 If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. Request a Tutorial \u00b6 If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a Tutorial","title":"Contributing"},{"location":"CONTRIBUTING/#contributing","text":"Interested in contributing to nRF52840 M.2 Developer Kit ? Want to report a bug? Before you do, please read the following guidelines.","title":"Contributing"},{"location":"CONTRIBUTING/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can reach us on makerdiary/community .","title":"Got a question or problem?"},{"location":"CONTRIBUTING/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix.","title":"Found a bug?"},{"location":"CONTRIBUTING/#request-a-tutorial","text":"If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a Tutorial","title":"Request a Tutorial"},{"location":"LICENSE/","text":"MIT License Copyright \u00a9 2020 makerdiary Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"getting-started/","text":"Getting Started with nRF52840 M.2 Developer Kit \u00b6 Introduction \u00b6 This guide describes how to run the Out-of-Box Demo without going through the complete toolchain installation. After following along with this section, you\u2019ll be ready to start building your projects. Included in the Box \u00b6 Your nRF52840 M.2 Developer Kit box includes: Part Qty nRF52840 M.2 Module 1 M.2 Dock 1 2.4 GHz Cabled PCB Antenna 1 NFC Cabled PCB Antenna 1 USB-C Cable 1 Assemble the hardware \u00b6 Make sure the M.2 Dock is powered off Attach the provided 2.4GHz and NFC cabled PCB antennas to the nRF52840 M.2 module as shown in the figure below: Insert the module into the connector as shown in the figure below: Angle of Insertion Angled insertion is allowable and preferred to minimize the insertion force. The angle of insertion is 5\u00b0 ~ 25\u00b0 , typically 20\u00b0 . Secure the module using the provided mounting screw as shown in the figure below: Connect the board \u00b6 Connect the Module USB port to your PC using the provided USB-C cable as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: Run Out-of-Box demo \u00b6 Now you're ready to run our Out-of-Box demo application! This application is an endless runner game written in Python. You can find the source code of the game on GitHub: examples/python/dino Just press the USER button to play the game: Next steps \u00b6 Now that you are familiar with the nRF52840 M.2 Developer Kit, it's time to explore more examples and tutorials available below: Python Tutorials nRF5 SDK Tutorials Zephyr OS Tutorials To program the nRF52840 M.2 Module, check out this tutorial: How to Program the nRF52840 M.2 Module To perform real-time current profiling of your applications, try this tutorial: Getting Started with Power Profiling Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Getting Started"},{"location":"getting-started/#getting-started-with-nrf52840-m2-developer-kit","text":"","title":"Getting Started with nRF52840 M.2 Developer Kit"},{"location":"getting-started/#introduction","text":"This guide describes how to run the Out-of-Box Demo without going through the complete toolchain installation. After following along with this section, you\u2019ll be ready to start building your projects.","title":"Introduction"},{"location":"getting-started/#included-in-the-box","text":"Your nRF52840 M.2 Developer Kit box includes: Part Qty nRF52840 M.2 Module 1 M.2 Dock 1 2.4 GHz Cabled PCB Antenna 1 NFC Cabled PCB Antenna 1 USB-C Cable 1","title":"Included in the Box"},{"location":"getting-started/#assemble-the-hardware","text":"Make sure the M.2 Dock is powered off Attach the provided 2.4GHz and NFC cabled PCB antennas to the nRF52840 M.2 module as shown in the figure below: Insert the module into the connector as shown in the figure below: Angle of Insertion Angled insertion is allowable and preferred to minimize the insertion force. The angle of insertion is 5\u00b0 ~ 25\u00b0 , typically 20\u00b0 . Secure the module using the provided mounting screw as shown in the figure below:","title":"Assemble the hardware"},{"location":"getting-started/#connect-the-board","text":"Connect the Module USB port to your PC using the provided USB-C cable as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer:","title":"Connect the board"},{"location":"getting-started/#run-out-of-box-demo","text":"Now you're ready to run our Out-of-Box demo application! This application is an endless runner game written in Python. You can find the source code of the game on GitHub: examples/python/dino Just press the USER button to play the game:","title":"Run Out-of-Box demo"},{"location":"getting-started/#next-steps","text":"Now that you are familiar with the nRF52840 M.2 Developer Kit, it's time to explore more examples and tutorials available below: Python Tutorials nRF5 SDK Tutorials Zephyr OS Tutorials To program the nRF52840 M.2 Module, check out this tutorial: How to Program the nRF52840 M.2 Module To perform real-time current profiling of your applications, try this tutorial: Getting Started with Power Profiling","title":"Next steps"},{"location":"getting-started/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"power-profiling/","text":"Getting Started with Power Profiling \u00b6 Description \u00b6 The M.2 Dock features an Advanced Power Profiler, enabling you to perform real-time current profiling of your applications without using external tools. Key features Up to 690 mA current measurement Voltage tracking 30000 samples per second Precision amplifiers with dual gain stage Cross-platform utility available in Python This section details how to perform real-time current profiling of your applications. How it works \u00b6 The Advanced Power Profiler utilizes a current sense amplifier together with a dual gain stage to measure the voltage drop over a small series resistor (0.056\u03a9). The output voltage is measured by an ADC channel. The Advanced Power Profiler is capable of measuring currents up to 690 mA. When measuring currents below 11 mA, the accuracy is 50 \u00b5A. For currents above 11 mA, the accuracy is 5 mA. In addition, the voltage of the module (VDD_M2) is measured by another ADC channel through a 1:2 voltage divider. After the conversion is completed, the samples are exported to the Power Profiler utility over USB CDC ACM. It can produce 30000 samples per second (2 bytes per sample). The figure below shows how the Advanced Power Profiler works: Installing the Power Profiler \u00b6 Power Profiler is an open source Python utility for real-time power profiling of your applications running on the nRF52840 M.2 Developer Kit. It is fully cross-platform, with support for Linux, macOS, and Windows. The latest stable version of Power Profiler can be installed via pip as follows. pip3 install power-profiler Using the Power Profiler \u00b6 The steps below demonstrate how to use the Power Profiler utility to perform real-time current profiling of a simple application: Assemble the M.2 Module, then connect the Debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Program the board with your application firmware. Will use the Blinky example here to keep it simple. Start the Power Profiler in your terminal by running: power-profiler The Power Profiler window will appear. Observe the current curve: You can try more example applications and measure their real-time power consumption. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Power Profiling"},{"location":"power-profiling/#getting-started-with-power-profiling","text":"","title":"Getting Started with Power Profiling"},{"location":"power-profiling/#description","text":"The M.2 Dock features an Advanced Power Profiler, enabling you to perform real-time current profiling of your applications without using external tools. Key features Up to 690 mA current measurement Voltage tracking 30000 samples per second Precision amplifiers with dual gain stage Cross-platform utility available in Python This section details how to perform real-time current profiling of your applications.","title":"Description"},{"location":"power-profiling/#how-it-works","text":"The Advanced Power Profiler utilizes a current sense amplifier together with a dual gain stage to measure the voltage drop over a small series resistor (0.056\u03a9). The output voltage is measured by an ADC channel. The Advanced Power Profiler is capable of measuring currents up to 690 mA. When measuring currents below 11 mA, the accuracy is 50 \u00b5A. For currents above 11 mA, the accuracy is 5 mA. In addition, the voltage of the module (VDD_M2) is measured by another ADC channel through a 1:2 voltage divider. After the conversion is completed, the samples are exported to the Power Profiler utility over USB CDC ACM. It can produce 30000 samples per second (2 bytes per sample). The figure below shows how the Advanced Power Profiler works:","title":"How it works"},{"location":"power-profiling/#installing-the-power-profiler","text":"Power Profiler is an open source Python utility for real-time power profiling of your applications running on the nRF52840 M.2 Developer Kit. It is fully cross-platform, with support for Linux, macOS, and Windows. The latest stable version of Power Profiler can be installed via pip as follows. pip3 install power-profiler","title":"Installing the Power Profiler"},{"location":"power-profiling/#using-the-power-profiler","text":"The steps below demonstrate how to use the Power Profiler utility to perform real-time current profiling of a simple application: Assemble the M.2 Module, then connect the Debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Program the board with your application firmware. Will use the Blinky example here to keep it simple. Start the Power Profiler in your terminal by running: power-profiler The Power Profiler window will appear. Observe the current curve: You can try more example applications and measure their real-time power consumption.","title":"Using the Power Profiler"},{"location":"power-profiling/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"programming/","text":"How to Program the nRF52840 M.2 Module \u00b6 Description \u00b6 The M.2 Dock included in the Developer Kit features a fully-integrated DAPLink debugger, which enables you to program and debug the nRF52840 M.2 Module. This section describes how to program the nRF52840 M.2 Module using the M.2 Dock. You have the following two options to program your module: Drag-n-Drop Programming Using pyOCD Command Tool Prepare for Programming \u00b6 Mount the nRF52840 M.2 Module Connect the Debugger USB port to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer. Drag-n-Drop Programming \u00b6 Drag-n-Drop is an optional intuitive programming feature. It allows programming of your target MCU in a very simple way: dragging and dropping a file ( .hex -format) onto the M2-DOCK drive. There is no need to install application software. Anyone that can drag and drop a file to a USB memory stick can now program the target module. Tip Upon completion, the drive remounts. If a failure occurs, the file FAIL.TXT appears on the drive containing information about the failure. Using pyOCD Command Tool \u00b6 pyOCD is an open source Python package for programming and debugging Arm Cortex-M microcontrollers using the DAPLink debugger. It is fully cross-platform, with support for Linux, macOS, and Windows. The latest stable version of pyOCD can be installed via pip as follows. Skip the installation if pyOCD already exists. pip install -U pyocd List information about the probe connected to your computer by running: pyocd list The output should be similar as below: # Probe Unique ID -------------------------------------------------------------------------------- 0 ARM DAPLink CMSIS-DAP 10283602185129a100000000000000000000000097969902 The following commands demonstrate how to flash/erase the nRF52840 M.2 Module: To erase the whole flash of the nRF52840 target: pyocd erase -t nrf52840 --chip To flash the nRF52840 target with .hex -format firmware: pyocd flash -t nrf52840 Sample.hex To flash the nRF52840 target with a plain binary: pyocd flash -t nrf52840 --base-address 0x1000 Sample.bin The --base-address option is used for setting the address where to flash a binary. Defaults to start of flash. Tip Run pyocd --hlep to get the available commands and additional help. Reference \u00b6 M.2 Dock User's Guide pyOCD Documentation Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Programming"},{"location":"programming/#how-to-program-the-nrf52840-m2-module","text":"","title":"How to Program the nRF52840 M.2 Module"},{"location":"programming/#description","text":"The M.2 Dock included in the Developer Kit features a fully-integrated DAPLink debugger, which enables you to program and debug the nRF52840 M.2 Module. This section describes how to program the nRF52840 M.2 Module using the M.2 Dock. You have the following two options to program your module: Drag-n-Drop Programming Using pyOCD Command Tool","title":"Description"},{"location":"programming/#prepare-for-programming","text":"Mount the nRF52840 M.2 Module Connect the Debugger USB port to your PC using the provided USB-C Cable A disk drive called M2-DOCK will be automatically detected by the computer.","title":"Prepare for Programming"},{"location":"programming/#drag-n-drop-programming","text":"Drag-n-Drop is an optional intuitive programming feature. It allows programming of your target MCU in a very simple way: dragging and dropping a file ( .hex -format) onto the M2-DOCK drive. There is no need to install application software. Anyone that can drag and drop a file to a USB memory stick can now program the target module. Tip Upon completion, the drive remounts. If a failure occurs, the file FAIL.TXT appears on the drive containing information about the failure.","title":"Drag-n-Drop Programming"},{"location":"programming/#using-pyocd-command-tool","text":"pyOCD is an open source Python package for programming and debugging Arm Cortex-M microcontrollers using the DAPLink debugger. It is fully cross-platform, with support for Linux, macOS, and Windows. The latest stable version of pyOCD can be installed via pip as follows. Skip the installation if pyOCD already exists. pip install -U pyocd List information about the probe connected to your computer by running: pyocd list The output should be similar as below: # Probe Unique ID -------------------------------------------------------------------------------- 0 ARM DAPLink CMSIS-DAP 10283602185129a100000000000000000000000097969902 The following commands demonstrate how to flash/erase the nRF52840 M.2 Module: To erase the whole flash of the nRF52840 target: pyocd erase -t nrf52840 --chip To flash the nRF52840 target with .hex -format firmware: pyocd flash -t nrf52840 Sample.hex To flash the nRF52840 target with a plain binary: pyocd flash -t nrf52840 --base-address 0x1000 Sample.bin The --base-address option is used for setting the address where to flash a binary. Defaults to start of flash. Tip Run pyocd --hlep to get the available commands and additional help.","title":"Using pyOCD Command Tool"},{"location":"programming/#reference","text":"M.2 Dock User's Guide pyOCD Documentation","title":"Reference"},{"location":"programming/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"resources/","text":"Resources \u00b6 See below for available documentation, software, and other resources. Documentation and guides \u00b6 Getting Started with the nRF52840 M.2 Developer Kit How to Program the nRF52840 M.2 Module Getting Started with Power Profiling Python Tutorials nRF5 SDK Tutorials Zephyr OS Tutorials Hardware Resource \u00b6 nRF52840 M.2 Developer Kit Hardware Diagram V1.0 nRF52840 M.2 Developer Kit 3D Model V1.0 nRF52840 M.2 Module Hardware Diagram V1.0 nRF52840 M.2 Module Schematic V1.0 nRF52840 M.2 Module Board File V1.0 nRF52840 M.2 Module 3D Model V1.0 M.2 Dock Hardware Diagram V1.0 M.2 Dock Schematic V1.0 M.2 Dock Board File V1.0 M.2 Dock 3D Model V1.0 Request a Tutorial \u00b6 If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a Tutorial","title":"Resources"},{"location":"resources/#resources","text":"See below for available documentation, software, and other resources.","title":"Resources"},{"location":"resources/#documentation-and-guides","text":"Getting Started with the nRF52840 M.2 Developer Kit How to Program the nRF52840 M.2 Module Getting Started with Power Profiling Python Tutorials nRF5 SDK Tutorials Zephyr OS Tutorials","title":"Documentation and guides"},{"location":"resources/#hardware-resource","text":"nRF52840 M.2 Developer Kit Hardware Diagram V1.0 nRF52840 M.2 Developer Kit 3D Model V1.0 nRF52840 M.2 Module Hardware Diagram V1.0 nRF52840 M.2 Module Schematic V1.0 nRF52840 M.2 Module Board File V1.0 nRF52840 M.2 Module 3D Model V1.0 M.2 Dock Hardware Diagram V1.0 M.2 Dock Schematic V1.0 M.2 Dock Board File V1.0 M.2 Dock 3D Model V1.0","title":"Hardware Resource"},{"location":"resources/#request-a-tutorial","text":"If you don't see what you're looking for, you can request a tutoial by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request a Tutorial","title":"Request a Tutorial"},{"location":"where-to-buy/","text":"Where to Buy nRF52840 M.2 Developer Kit \u00b6 Buy Online \u00b6 nRF52840 M.2 Developer Kit is available on the following channels (click to go directly to the product): Bulk & Customization \u00b6 We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, feel free to contact us and we'll reply before you know it: contact@makerdiary.com Contact Us","title":"Where to Buy"},{"location":"where-to-buy/#where-to-buy-nrf52840-m2-developer-kit","text":"","title":"Where to Buy nRF52840 M.2 Developer Kit"},{"location":"where-to-buy/#buy-online","text":"nRF52840 M.2 Developer Kit is available on the following channels (click to go directly to the product):","title":"Buy Online"},{"location":"where-to-buy/#bulk-customization","text":"We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, feel free to contact us and we'll reply before you know it: contact@makerdiary.com Contact Us","title":"Bulk &amp; Customization"},{"location":"nrf5-sdk/","text":"nRF5 SDK Essential Software Development Kit for the nRF5x Series SoC \u00b6 Introduction \u00b6 The nRF5 SDK is your first stop for building fully featured, reliable and secure applications with the nRF5 Series. It offers developers a wealth of varied modules and examples right across the spectrum including numerous Bluetooth Low Energy profiles, Device Firmware Upgrade (DFU), GATT serializer and driver support for all peripherals on all nRF5 Series devices. The nRF5 SDK will almost certainly have something for your needs in developing exciting yet robust wireless products. The SDK is delivered as a plain .zip-archive, which makes it easy to install as well as giving you the freedom to choose the IDE and compiler of your choice. For more details, please visit the Nordic Semiconductor site. Our nRF5 SDK tutorials include descriptions and other reference material to ensure that everything is set up correctly. Examples are provided to help you to build state-of-the-art IoT applications in a very short time. See Setup the nRF5 SDK for instructions on how to set up your development environment. Setup the nRF5 SDK Reference \u00b6 nRF5 SDK Offical Site nRF5 SDK Online Documentation Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Overview"},{"location":"nrf5-sdk/#nrf5-sdkessential-software-development-kit-for-the-nrf5x-series-soc","text":"","title":"nRF5 SDKEssential Software Development Kit for the nRF5x Series SoC"},{"location":"nrf5-sdk/#introduction","text":"The nRF5 SDK is your first stop for building fully featured, reliable and secure applications with the nRF5 Series. It offers developers a wealth of varied modules and examples right across the spectrum including numerous Bluetooth Low Energy profiles, Device Firmware Upgrade (DFU), GATT serializer and driver support for all peripherals on all nRF5 Series devices. The nRF5 SDK will almost certainly have something for your needs in developing exciting yet robust wireless products. The SDK is delivered as a plain .zip-archive, which makes it easy to install as well as giving you the freedom to choose the IDE and compiler of your choice. For more details, please visit the Nordic Semiconductor site. Our nRF5 SDK tutorials include descriptions and other reference material to ensure that everything is set up correctly. Examples are provided to help you to build state-of-the-art IoT applications in a very short time. See Setup the nRF5 SDK for instructions on how to set up your development environment. Setup the nRF5 SDK","title":"Introduction"},{"location":"nrf5-sdk/#reference","text":"nRF5 SDK Offical Site nRF5 SDK Online Documentation","title":"Reference"},{"location":"nrf5-sdk/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/building/","text":"Building and Running a first example \u00b6 This section details how to build and run the simple Blinky example. Before you start building, remember to set up the nRF5 SDK development environment first: Setup the nRF5 SDK Building the example \u00b6 Now it's ready to build the first example. Will use the Blinky example here to keep it simple. The Blinky example shows how to blink the LEDs. The source code is located in nrf52840-m2-devkit/examples/nrf5-sdk/blinky . Open terminal and navigate to the directory with the example Makefile: cd ./nrf52840-m2-devkit/examples/nrf5-sdk/blinky/armgcc Run make to build the example: make Running the example \u00b6 After compiled, the firmware is located in blinky/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in blinky/armgcc to program the board: make flash_all Tip See Programming section for more details about how to program the nRF52840 M.2 Module. After programmed, the application will run automatically. Observe that the LEDs will start to blink as shown in this figure: Next steps \u00b6 Check out more nRF5 SDK examples for nRF52840 M.2 Developer Kit: Hardware Peripheral Examples Blinky Example BSP Example Battery Status Example microSD Card Example NFC Tag Example Power Profiling Example QSPI Flash Example RSSI Viewer Example Temperature Example TFT LCD Display Example USB CDC ACM Example Bluetooth Low Energy Examples BLE Blinky Example BLE Beacon Example BLE Battery Service Example BLE CLI Example BLE Heart Rate Service BLE HID Keyboard Example BLE HID Mouse Example Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Build & Run a first example"},{"location":"nrf5-sdk/building/#building-and-running-a-first-example","text":"This section details how to build and run the simple Blinky example. Before you start building, remember to set up the nRF5 SDK development environment first: Setup the nRF5 SDK","title":"Building and Running a first example"},{"location":"nrf5-sdk/building/#building-the-example","text":"Now it's ready to build the first example. Will use the Blinky example here to keep it simple. The Blinky example shows how to blink the LEDs. The source code is located in nrf52840-m2-devkit/examples/nrf5-sdk/blinky . Open terminal and navigate to the directory with the example Makefile: cd ./nrf52840-m2-devkit/examples/nrf5-sdk/blinky/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/building/#running-the-example","text":"After compiled, the firmware is located in blinky/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in blinky/armgcc to program the board: make flash_all Tip See Programming section for more details about how to program the nRF52840 M.2 Module. After programmed, the application will run automatically. Observe that the LEDs will start to blink as shown in this figure:","title":"Running the example"},{"location":"nrf5-sdk/building/#next-steps","text":"Check out more nRF5 SDK examples for nRF52840 M.2 Developer Kit: Hardware Peripheral Examples Blinky Example BSP Example Battery Status Example microSD Card Example NFC Tag Example Power Profiling Example QSPI Flash Example RSSI Viewer Example Temperature Example TFT LCD Display Example USB CDC ACM Example Bluetooth Low Energy Examples BLE Blinky Example BLE Beacon Example BLE Battery Service Example BLE CLI Example BLE Heart Rate Service BLE HID Keyboard Example BLE HID Mouse Example","title":"Next steps"},{"location":"nrf5-sdk/building/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/setup/","text":"Setup the nRF5 SDK Development Environment \u00b6 This section describes how to set up the nRF5 SDK development environment on your system. Set up the toolchain \u00b6 To build the nRF5 SDK applications, GNU ARM Embedded Toolchain is required. Follow one of the following guides for your host operating system: macOS Windows Linux macOS \u00b6 Follow the steps below to set up the development environment on macOS: GNU make is bundled with Xcode tools. Verify by running: make --v Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Then ensure the path is added to your OS PATH environment variable. echo 'export PATH=\"<path to install directory>/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}\"' >> ~/.bash_profile source ~/.bash_profile Type the following in your terminal to verify if the path is set correctly: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools-OSX , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. echo 'export PATH=\"<the path to the extracted directory>/mergehex:${PATH}\"' >> ~/.bash_profile source ~/.bash_profile Type the following in your terminal to verify if mergehex works: mergehex --version Install the latest stable version of pyOCD via pip as follows. Skip this step if pyOCD already exists. pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version Windows \u00b6 The following instructions rely on Chocolatey . If Chocolatey isn\u2019t an option, you can install dependencies from their respective websites and ensure the command line tools are on your PATH environment variable. Install chocolatey Open an Administrator cmd.exe window Disable global confirmation to avoid having to confirm installation of individual programs: choco feature enable -n allowGlobalConfirmation Use choco to install dependencies: choco install git make python Open a new cmd.exe window as a regular user to continue Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Run the installer and follow the given instructions. Upon completion, check the Add path to environment variable option. Then verify if the compiler works: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools for Win32 . Run the installer and follow the given instructions. Then verify if mergehex works: mergehex --version Install the latest stable version of pyOCD via pip as follows. Skip this step if pyOCD already exists. pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version Linux \u00b6 Here we describe how to set up the toolchain on Ubuntu version 18.04 LTS. The steps should be similar for other Linux distributions. Ensure your host system is up to date before proceeding. sudo apt update sudo apt upgrade Install the following packages using your system\u2019s package manager. sudo apt install build-essential checkinstall Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Then ensure the path is added to your OS PATH environment variable. echo 'export PATH=\"<path to install directory>/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}\"' >> ~/.bashrc source ~/.bashrc Type the following in your terminal to verify if the path is set correctly: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools-Linux-xxx , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. echo 'export PATH=\"<the path to the extracted directory>/mergehex:${PATH}\"' >> ~/.bashrc source ~/.bashrc Type the following in your terminal to verify if mergehex works: mergehex --version Install the latest stable version of pyOCD via pip as follows. Skip this step if pyOCD already exists. pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version Clone the repository \u00b6 Clone the nrf52840-m2-devkit repository from GitHub: git clone https://github.com/makerdiary/nrf52840-m2-devkit Install the nRF5 SDK \u00b6 Download the SDK file nRF5_SDK_16.0.0_98a08e2 from www.nordicsemi.com . Note that the current version is 16.0.0 . nRF5_SDK_16.0.0_98a08e2 Extract the zip file to the nrf52840-m2-devkit/nrf_sdks directory. This should give you the following folder structure: ./nrf52840-m2-devkit/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 boards \u251c\u2500\u2500 config \u251c\u2500\u2500 docs \u251c\u2500\u2500 examples \u251c\u2500\u2500 firmware \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 nrf_sdks \u2502 \u251c\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 nRF5_SDK_16.0.0_98a08e2 \u2514\u2500\u2500 tools To use the nRF5 SDK you first need to set the toolchain path in makefile.windows or makefile.posix depending on platform you are using. That is, the .posix should be edited if you are working on either Linux or macOS. These files are located in: cd <nRF5 SDK>/components/toolchain/gcc Open the file in a text editor ( Visual Studio Code is recommended), and make sure that the GNU_INSTALL_ROOT variable is pointing to your GNU Arm Embedded Toolchain install directory. GNU_INSTALL_ROOT ? = $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-7-2018-q2-update/bin/ GNU_VERSION ? = 7 .3.1 GNU_PREFIX ? = arm-none-eabi Next steps \u00b6 If everything works as expected, it's ready to build and run the examples to verify the development environment setup. The steps that are described in Build & Run a first example will walk you through verifying your setup with the simple Blinky example. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Setup the nRF5 SDK"},{"location":"nrf5-sdk/setup/#setup-the-nrf5-sdk-development-environment","text":"This section describes how to set up the nRF5 SDK development environment on your system.","title":"Setup the nRF5 SDK Development Environment"},{"location":"nrf5-sdk/setup/#set-up-the-toolchain","text":"To build the nRF5 SDK applications, GNU ARM Embedded Toolchain is required. Follow one of the following guides for your host operating system: macOS Windows Linux","title":"Set up the toolchain"},{"location":"nrf5-sdk/setup/#macos","text":"Follow the steps below to set up the development environment on macOS: GNU make is bundled with Xcode tools. Verify by running: make --v Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Then ensure the path is added to your OS PATH environment variable. echo 'export PATH=\"<path to install directory>/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}\"' >> ~/.bash_profile source ~/.bash_profile Type the following in your terminal to verify if the path is set correctly: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools-OSX , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. echo 'export PATH=\"<the path to the extracted directory>/mergehex:${PATH}\"' >> ~/.bash_profile source ~/.bash_profile Type the following in your terminal to verify if mergehex works: mergehex --version Install the latest stable version of pyOCD via pip as follows. Skip this step if pyOCD already exists. pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version","title":"macOS"},{"location":"nrf5-sdk/setup/#windows","text":"The following instructions rely on Chocolatey . If Chocolatey isn\u2019t an option, you can install dependencies from their respective websites and ensure the command line tools are on your PATH environment variable. Install chocolatey Open an Administrator cmd.exe window Disable global confirmation to avoid having to confirm installation of individual programs: choco feature enable -n allowGlobalConfirmation Use choco to install dependencies: choco install git make python Open a new cmd.exe window as a regular user to continue Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Run the installer and follow the given instructions. Upon completion, check the Add path to environment variable option. Then verify if the compiler works: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools for Win32 . Run the installer and follow the given instructions. Then verify if mergehex works: mergehex --version Install the latest stable version of pyOCD via pip as follows. Skip this step if pyOCD already exists. pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version","title":"Windows"},{"location":"nrf5-sdk/setup/#linux","text":"Here we describe how to set up the toolchain on Ubuntu version 18.04 LTS. The steps should be similar for other Linux distributions. Ensure your host system is up to date before proceeding. sudo apt update sudo apt upgrade Install the following packages using your system\u2019s package manager. sudo apt install build-essential checkinstall Download and install the GNU ARM Embedded Toolchain . The 7-2018-q2-update version is recommended. Then ensure the path is added to your OS PATH environment variable. echo 'export PATH=\"<path to install directory>/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}\"' >> ~/.bashrc source ~/.bashrc Type the following in your terminal to verify if the path is set correctly: arm-none-eabi-gcc --version Download the nRF5x-Command-Line-Tools-Linux-xxx , then extract the .tar archive anywhere on your filesystem. Ensure the extracted directory is added to your OS PATH environment variable. echo 'export PATH=\"<the path to the extracted directory>/mergehex:${PATH}\"' >> ~/.bashrc source ~/.bashrc Type the following in your terminal to verify if mergehex works: mergehex --version Install the latest stable version of pyOCD via pip as follows. Skip this step if pyOCD already exists. pip install -U pyocd Type the following in your terminal to verify if pyocd works: pyocd --version","title":"Linux"},{"location":"nrf5-sdk/setup/#clone-the-repository","text":"Clone the nrf52840-m2-devkit repository from GitHub: git clone https://github.com/makerdiary/nrf52840-m2-devkit","title":"Clone the repository"},{"location":"nrf5-sdk/setup/#install-the-nrf5-sdk","text":"Download the SDK file nRF5_SDK_16.0.0_98a08e2 from www.nordicsemi.com . Note that the current version is 16.0.0 . nRF5_SDK_16.0.0_98a08e2 Extract the zip file to the nrf52840-m2-devkit/nrf_sdks directory. This should give you the following folder structure: ./nrf52840-m2-devkit/ \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 README.md \u251c\u2500\u2500 boards \u251c\u2500\u2500 config \u251c\u2500\u2500 docs \u251c\u2500\u2500 examples \u251c\u2500\u2500 firmware \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 nrf_sdks \u2502 \u251c\u2500\u2500 README.md \u2502 \u2514\u2500\u2500 nRF5_SDK_16.0.0_98a08e2 \u2514\u2500\u2500 tools To use the nRF5 SDK you first need to set the toolchain path in makefile.windows or makefile.posix depending on platform you are using. That is, the .posix should be edited if you are working on either Linux or macOS. These files are located in: cd <nRF5 SDK>/components/toolchain/gcc Open the file in a text editor ( Visual Studio Code is recommended), and make sure that the GNU_INSTALL_ROOT variable is pointing to your GNU Arm Embedded Toolchain install directory. GNU_INSTALL_ROOT ? = $( HOME ) /gcc-arm-none-eabi/gcc-arm-none-eabi-7-2018-q2-update/bin/ GNU_VERSION ? = 7 .3.1 GNU_PREFIX ? = arm-none-eabi","title":"Install the nRF5 SDK"},{"location":"nrf5-sdk/setup/#next-steps","text":"If everything works as expected, it's ready to build and run the examples to verify the development environment setup. The steps that are described in Build & Run a first example will walk you through verifying your setup with the simple Blinky example.","title":"Next steps"},{"location":"nrf5-sdk/setup/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/battery/","text":"Battery Status Example \u00b6 Description \u00b6 The Battery Status Example shows how to get the status of the battery charger, including the battery level and charging state. The example initializes the SAADC driver and configures one channel to sample the voltage of the battery. Application Timer module is used to generate a timeout event. When the timer expires, the callback function will be called to print the measurement. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/battery_status . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/battery_status/armgcc Run make to build the example: make Programming the firmware \u00b6 If compiled successfully, the firmware is located in battery_status/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in battery_status/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Test the example by performing the following steps: Connect a 3.7V Li-Po battery with 2-pin JST-PH 2.0 connector to the Battery connector. Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Observe that the battery status is printed every 2 seconds. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Battery Status"},{"location":"nrf5-sdk/examples/battery/#battery-status-example","text":"","title":"Battery Status Example"},{"location":"nrf5-sdk/examples/battery/#description","text":"The Battery Status Example shows how to get the status of the battery charger, including the battery level and charging state. The example initializes the SAADC driver and configures one channel to sample the voltage of the battery. Application Timer module is used to generate a timeout event. When the timer expires, the callback function will be called to print the measurement. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/battery/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/battery_status . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/battery_status/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/examples/battery/#programming-the-firmware","text":"If compiled successfully, the firmware is located in battery_status/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in battery_status/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/battery/#testing","text":"Test the example by performing the following steps: Connect a 3.7V Li-Po battery with 2-pin JST-PH 2.0 connector to the Battery connector. Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Observe that the battery status is printed every 2 seconds.","title":"Testing"},{"location":"nrf5-sdk/examples/battery/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/ble-bas/","text":"BLE Battery Service Example \u00b6 Description \u00b6 The BLE Battery Service Example demonstrates how to use the Battery Service module. This module implements the Battery Service with the Battery Level characteristic. The application includes the two services: Battery Service Device Information Service When the application starts, the BSP is initialized. Next, a timer for generating battery measurements is started. When notification of Battery Level characteristic is enabled, the Battery Level is notified each time the Battery Level measurement timer expires. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_bas . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_bas/armgcc Run make merge to build the application and merge with the Softdevice: make merge Programming the firmware \u00b6 If compiled successfully, the firmware is located in ble_app_bas/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_bas/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 You can test the application with the LightBlue app by performing the following steps: Download the LightBlue app from App Store or Google Play. Connect a 3.7V Li-Po battery with 2-pin JST-PH 2.0 connector to the Battery connector. Connect to the device from LightBlue (the device is advertising as nRF52840 M.2 ). Observe that Battery Service and Device Information are shown in the connected device. Tap Battery Level and listen for notifications. The Battery Level notifications are received. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE Battery Service"},{"location":"nrf5-sdk/examples/ble-bas/#ble-battery-service-example","text":"","title":"BLE Battery Service Example"},{"location":"nrf5-sdk/examples/ble-bas/#description","text":"The BLE Battery Service Example demonstrates how to use the Battery Service module. This module implements the Battery Service with the Battery Level characteristic. The application includes the two services: Battery Service Device Information Service When the application starts, the BSP is initialized. Next, a timer for generating battery measurements is started. When notification of Battery Level characteristic is enabled, the Battery Level is notified each time the Battery Level measurement timer expires. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/ble-bas/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_bas . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_bas/armgcc Run make merge to build the application and merge with the Softdevice: make merge","title":"Building the example"},{"location":"nrf5-sdk/examples/ble-bas/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_bas/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_bas/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/ble-bas/#testing","text":"You can test the application with the LightBlue app by performing the following steps: Download the LightBlue app from App Store or Google Play. Connect a 3.7V Li-Po battery with 2-pin JST-PH 2.0 connector to the Battery connector. Connect to the device from LightBlue (the device is advertising as nRF52840 M.2 ). Observe that Battery Service and Device Information are shown in the connected device. Tap Battery Level and listen for notifications. The Battery Level notifications are received.","title":"Testing"},{"location":"nrf5-sdk/examples/ble-bas/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/ble-beacon/","text":"BLE Beacon Example \u00b6 Description \u00b6 The Beacon Example implements a transmitter beacon that broadcasts information to all compatible devices in its range as Manufacturer Specific Data in the advertisement packets. This information includes: A 128-bit UUID to identify the beacon's provider. An arbitrary Major value for coarse differentiation between beacons. An arbitrary Minor value for fine differentiation between beacons. The RSSI value of the beacon measured at 1 meter distance, which can be used for estimating the distance from the beacon. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_beacon . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_beacon/armgcc Run make merge to build the application and merge with the Softdevice: make merge Programming the firmware \u00b6 If compiled successfully, the firmware is located in ble_app_beacon/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_beacon/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Test the Beacon Example with nRF Connect by performing the following steps: After application starts, observe that GREEN LED is blinking. This indicates that the beacon is advertising. After starting discovery in nRF Connect, observe that the beacon is advertising with its Bluetooth device address without a Device Name. Tap the device to view the full advertisement data. Reference \u00b6 iBeacon Resource from Apple Developer Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE Beacon"},{"location":"nrf5-sdk/examples/ble-beacon/#ble-beacon-example","text":"","title":"BLE Beacon Example"},{"location":"nrf5-sdk/examples/ble-beacon/#description","text":"The Beacon Example implements a transmitter beacon that broadcasts information to all compatible devices in its range as Manufacturer Specific Data in the advertisement packets. This information includes: A 128-bit UUID to identify the beacon's provider. An arbitrary Major value for coarse differentiation between beacons. An arbitrary Minor value for fine differentiation between beacons. The RSSI value of the beacon measured at 1 meter distance, which can be used for estimating the distance from the beacon. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/ble-beacon/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_beacon . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_beacon/armgcc Run make merge to build the application and merge with the Softdevice: make merge","title":"Building the example"},{"location":"nrf5-sdk/examples/ble-beacon/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_beacon/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_beacon/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/ble-beacon/#testing","text":"Test the Beacon Example with nRF Connect by performing the following steps: After application starts, observe that GREEN LED is blinking. This indicates that the beacon is advertising. After starting discovery in nRF Connect, observe that the beacon is advertising with its Bluetooth device address without a Device Name. Tap the device to view the full advertisement data.","title":"Testing"},{"location":"nrf5-sdk/examples/ble-beacon/#reference","text":"iBeacon Resource from Apple Developer","title":"Reference"},{"location":"nrf5-sdk/examples/ble-beacon/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/ble-blinky/","text":"BLE Blinky Example \u00b6 Description \u00b6 The BLE Blinky Example uses the LED Button Service Server module. This module implements a custom LED Button Service with an LED and Button Characteristics that are used to toggle LEDs and receive button statuses from the nRF52840 M.2 module. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_blinky . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_blinky/armgcc Run make merge to build the application and merge with the Softdevice: make merge Programming the firmware \u00b6 If compiled successfully, the firmware is located in ble_app_blinky/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_blinky/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 You can test the example with the nRF Connect for Mobile app by performing the following steps: Download the nRF Connect for Mobile from App Store or Google Play. Connect to the device from nRF Connect (the device is advertising as Nordic_Blinky ). Observe the LEDs state. This indicates that the connections is established. Observe that the Nordic LED and Button Service is shown in the connected device. It contains two characteristics: Button State Characteristic and LED State Characteristic . Enable Notify on the Button State Characteristic . Notifications are received when pressing or releasing the USER Button. Write 01 to the LED State Characteristic and observe that GREEN LED is turned on. Write 00 to the LED State Characteristic and observe that GREEN LED is turned off. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE Blinky"},{"location":"nrf5-sdk/examples/ble-blinky/#ble-blinky-example","text":"","title":"BLE Blinky Example"},{"location":"nrf5-sdk/examples/ble-blinky/#description","text":"The BLE Blinky Example uses the LED Button Service Server module. This module implements a custom LED Button Service with an LED and Button Characteristics that are used to toggle LEDs and receive button statuses from the nRF52840 M.2 module. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/ble-blinky/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_blinky . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_blinky/armgcc Run make merge to build the application and merge with the Softdevice: make merge","title":"Building the example"},{"location":"nrf5-sdk/examples/ble-blinky/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_blinky/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_blinky/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/ble-blinky/#testing","text":"You can test the example with the nRF Connect for Mobile app by performing the following steps: Download the nRF Connect for Mobile from App Store or Google Play. Connect to the device from nRF Connect (the device is advertising as Nordic_Blinky ). Observe the LEDs state. This indicates that the connections is established. Observe that the Nordic LED and Button Service is shown in the connected device. It contains two characteristics: Button State Characteristic and LED State Characteristic . Enable Notify on the Button State Characteristic . Notifications are received when pressing or releasing the USER Button. Write 01 to the LED State Characteristic and observe that GREEN LED is turned on. Write 00 to the LED State Characteristic and observe that GREEN LED is turned off.","title":"Testing"},{"location":"nrf5-sdk/examples/ble-blinky/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/ble-cli/","text":"BLE CLI Example \u00b6 Description \u00b6 The Command Line Interface over BLE (BLE CLI) Application is an example that demonstrates how BLE NUS (Nordic UART service) can be used as a transport for a console. Web Device CLI is a web-based command line interface using Web Bluetooth API. It implements the Nordic UART Service (NUS) with Bluetooth Low Energy. This web utility can be used to connect to the BLE CLI example. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_cli . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_cli/armgcc Run make merge to build the application and merge with the Softdevice: make merge Programming the firmware \u00b6 If compiled successfully, the firmware is located in ble_app_cli/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_cli/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Perform the following steps to test the BLE CLI example: Open the Web Device CLI page in a Chrome 56+ browser . Web Device CLI Click Connect to scan devices. Pair the Nordic_CLI discovered in the list. Observe that the LED stays GREEN and the ble_cli:~$ prompt is displayed. Press the Tab on your keyboard to print the available commands. Use command led {R} {G} {B} to set the RGB LED color and observe the RGB LED on the module. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE CLI"},{"location":"nrf5-sdk/examples/ble-cli/#ble-cli-example","text":"","title":"BLE CLI Example"},{"location":"nrf5-sdk/examples/ble-cli/#description","text":"The Command Line Interface over BLE (BLE CLI) Application is an example that demonstrates how BLE NUS (Nordic UART service) can be used as a transport for a console. Web Device CLI is a web-based command line interface using Web Bluetooth API. It implements the Nordic UART Service (NUS) with Bluetooth Low Energy. This web utility can be used to connect to the BLE CLI example. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/ble-cli/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_cli . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_cli/armgcc Run make merge to build the application and merge with the Softdevice: make merge","title":"Building the example"},{"location":"nrf5-sdk/examples/ble-cli/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_cli/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_cli/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/ble-cli/#testing","text":"Perform the following steps to test the BLE CLI example: Open the Web Device CLI page in a Chrome 56+ browser . Web Device CLI Click Connect to scan devices. Pair the Nordic_CLI discovered in the list. Observe that the LED stays GREEN and the ble_cli:~$ prompt is displayed. Press the Tab on your keyboard to print the available commands. Use command led {R} {G} {B} to set the RGB LED color and observe the RGB LED on the module.","title":"Testing"},{"location":"nrf5-sdk/examples/ble-cli/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/ble-hids-keyboard/","text":"BLE HID Keyboard Example \u00b6 The BLE HID Keyboard Example demonstrates how to implement the HID over GATT profile for keyboard. The application includes the three mandatory services needed for the HID over GATT profile: Human Interface Device Service Device Information Service Battery Service Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_hids_keyboard . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_hids_keyboard/armgcc Run make merge to build the application and merge with the Softdevice: make merge Programming the firmware \u00b6 If compiled successfully, the firmware is located in ble_app_hids_keyboard/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_hids_keyboard/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Use a computer with Bluetooth Low Energy supported to test the HID Keyboard Example. Here goes with macOS. After the application starts, observe that GREEN LED is blinking. This indicates that the device is advertising. Go to System Preferences -> Bluetooth Preferences , observe that the BLE HID keyboard named Nordic_Keyboard is found. Connect to the keyboard. Observe that GREEN constant light, that is, the connections is established. Put your cursor in the following text area and press the USER button on the board to input hello : Note RESET the board to clear bond information from persistent storage before the next connection. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE HID Keyboard"},{"location":"nrf5-sdk/examples/ble-hids-keyboard/#ble-hid-keyboard-example","text":"The BLE HID Keyboard Example demonstrates how to implement the HID over GATT profile for keyboard. The application includes the three mandatory services needed for the HID over GATT profile: Human Interface Device Service Device Information Service Battery Service Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"BLE HID Keyboard Example"},{"location":"nrf5-sdk/examples/ble-hids-keyboard/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_hids_keyboard . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_hids_keyboard/armgcc Run make merge to build the application and merge with the Softdevice: make merge","title":"Building the example"},{"location":"nrf5-sdk/examples/ble-hids-keyboard/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_hids_keyboard/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_hids_keyboard/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/ble-hids-keyboard/#testing","text":"Use a computer with Bluetooth Low Energy supported to test the HID Keyboard Example. Here goes with macOS. After the application starts, observe that GREEN LED is blinking. This indicates that the device is advertising. Go to System Preferences -> Bluetooth Preferences , observe that the BLE HID keyboard named Nordic_Keyboard is found. Connect to the keyboard. Observe that GREEN constant light, that is, the connections is established. Put your cursor in the following text area and press the USER button on the board to input hello : Note RESET the board to clear bond information from persistent storage before the next connection.","title":"Testing"},{"location":"nrf5-sdk/examples/ble-hids-keyboard/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/ble-hids-mouse/","text":"BLE HID Mouse Example \u00b6 The BLE HID Mouse Example demonstrates how to implement the HID over GATT profile for mouse. The application includes the three mandatory services needed for the HID over GATT profile: Human Interface Device Service Device Information Service Battery Service Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_hids_mouse . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_hids_mouse/armgcc Run make merge to build the application and merge with the Softdevice: make merge Programming the firmware \u00b6 If compiled successfully, the firmware is located in ble_app_hids_mouse/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_hids_mouse/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Use a computer with Bluetooth Low Energy supported to test the HID Mouse Example. Here goes with macOS. After the application starts, observe that GREEN LED is blinking. This indicates that the device is advertising. Go to System Preferences -> Bluetooth Preferences , observe that the BLE HID Mouse named nRF5_Mouse is found. Connect to the mouse. Observe that GREEN constant light, that is, the connections is established. Press USER button on the board. Observe that the mouse pointer on the screen moves to the left. Note RESET the board to clear bond information from persistent storage before the next connection. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE HID Mouse"},{"location":"nrf5-sdk/examples/ble-hids-mouse/#ble-hid-mouse-example","text":"The BLE HID Mouse Example demonstrates how to implement the HID over GATT profile for mouse. The application includes the three mandatory services needed for the HID over GATT profile: Human Interface Device Service Device Information Service Battery Service Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"BLE HID Mouse Example"},{"location":"nrf5-sdk/examples/ble-hids-mouse/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_hids_mouse . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_hids_mouse/armgcc Run make merge to build the application and merge with the Softdevice: make merge","title":"Building the example"},{"location":"nrf5-sdk/examples/ble-hids-mouse/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_hids_mouse/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_hids_mouse/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/ble-hids-mouse/#testing","text":"Use a computer with Bluetooth Low Energy supported to test the HID Mouse Example. Here goes with macOS. After the application starts, observe that GREEN LED is blinking. This indicates that the device is advertising. Go to System Preferences -> Bluetooth Preferences , observe that the BLE HID Mouse named nRF5_Mouse is found. Connect to the mouse. Observe that GREEN constant light, that is, the connections is established. Press USER button on the board. Observe that the mouse pointer on the screen moves to the left. Note RESET the board to clear bond information from persistent storage before the next connection.","title":"Testing"},{"location":"nrf5-sdk/examples/ble-hids-mouse/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/ble-hrs/","text":"BLE Heart Rate Sensor Example \u00b6 Description \u00b6 The BLE Heart Rate Sensor Example is an example that implements the Heart Rate profile running on nRF52840 M.2 module. The application includes the three services in the Heart Rate profile: Heart Rate Service Battery Service Device Information Service When the application starts, the BSP is initialized. Then, three timers are started. These timers control the generation of various parts of the Heart Rate Measurement characteristic value: Heart Rate RR Interval Sensor Contact Detected Also, a timer for generating battery measurements is started. When notification of Heart Rate Measurement characteristic is enabled, the Heart Rate Measurement, containing the current value for all the components of the Heart Rate Measurement characteristic, is notified each time the Heart Rate measurement timer expires. When notification of Battery Level characteristic is enabled, the Battery Level is notified each time the Battery Level measurement timer expires. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_hrs . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_hrs/armgcc Run make merge to build the application and merge with the Softdevice: make merge Programming the firmware \u00b6 If compiled successfully, the firmware is located in ble_app_hrs/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_hrs/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 You can test the application with the LightBlue app by performing the following steps: Download the LightBlue app from App Store or Google Play. Connect to the device from LightBlue (the device is advertising as Nordic_HRM ). Observe that the services are shown in the connected device and that you can start receiving values for the Heart Rate Measurement and the Battery Service by clicking the Listen for notifications . Heart Rate notifications are received every second, and Battery Level notifications are received every two seconds. Alternatively, you can visit the Web Bluetooth Demo page to test the example: Web Bluetooth HRS Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE Heart Rate Service"},{"location":"nrf5-sdk/examples/ble-hrs/#ble-heart-rate-sensor-example","text":"","title":"BLE Heart Rate Sensor Example"},{"location":"nrf5-sdk/examples/ble-hrs/#description","text":"The BLE Heart Rate Sensor Example is an example that implements the Heart Rate profile running on nRF52840 M.2 module. The application includes the three services in the Heart Rate profile: Heart Rate Service Battery Service Device Information Service When the application starts, the BSP is initialized. Then, three timers are started. These timers control the generation of various parts of the Heart Rate Measurement characteristic value: Heart Rate RR Interval Sensor Contact Detected Also, a timer for generating battery measurements is started. When notification of Heart Rate Measurement characteristic is enabled, the Heart Rate Measurement, containing the current value for all the components of the Heart Rate Measurement characteristic, is notified each time the Heart Rate measurement timer expires. When notification of Battery Level characteristic is enabled, the Battery Level is notified each time the Battery Level measurement timer expires. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/ble-hrs/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/ble_app_hrs . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/ble_app_hrs/armgcc Run make merge to build the application and merge with the Softdevice: make merge","title":"Building the example"},{"location":"nrf5-sdk/examples/ble-hrs/#programming-the-firmware","text":"If compiled successfully, the firmware is located in ble_app_hrs/armgcc/_build with the name nrf52840_xxaa_s140.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in ble_app_hrs/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/ble-hrs/#testing","text":"You can test the application with the LightBlue app by performing the following steps: Download the LightBlue app from App Store or Google Play. Connect to the device from LightBlue (the device is advertising as Nordic_HRM ). Observe that the services are shown in the connected device and that you can start receiving values for the Heart Rate Measurement and the Battery Service by clicking the Listen for notifications . Heart Rate notifications are received every second, and Battery Level notifications are received every two seconds. Alternatively, you can visit the Web Bluetooth Demo page to test the example: Web Bluetooth HRS","title":"Testing"},{"location":"nrf5-sdk/examples/ble-hrs/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/blinky/","text":"Blinky Example \u00b6 Description \u00b6 The Blinky Example demonstrates how to configure the GPIO pins to drive the LEDs. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 The source code and the project file of the example are located in the following folder: examples/nrf5-sdk/blinky . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/blinky/armgcc Run make to build the example: make Programming the firmware \u00b6 After compiled, the firmware is located in blinky/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in blinky/armgcc to program the board: make flash_all Tip See Programming section for more details about how to program the nRF52840 M.2 Module. Testing \u00b6 After programmed, the application will run automatically. Observe that the LEDs will start to blink as shown in this figure: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Blinky"},{"location":"nrf5-sdk/examples/blinky/#blinky-example","text":"","title":"Blinky Example"},{"location":"nrf5-sdk/examples/blinky/#description","text":"The Blinky Example demonstrates how to configure the GPIO pins to drive the LEDs. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/blinky/#building-the-example","text":"The source code and the project file of the example are located in the following folder: examples/nrf5-sdk/blinky . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/blinky/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/examples/blinky/#programming-the-firmware","text":"After compiled, the firmware is located in blinky/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in blinky/armgcc to program the board: make flash_all Tip See Programming section for more details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/blinky/#testing","text":"After programmed, the application will run automatically. Observe that the LEDs will start to blink as shown in this figure:","title":"Testing"},{"location":"nrf5-sdk/examples/blinky/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/bsp/","text":"BSP Example \u00b6 Description \u00b6 The Board Support Package (BSP) Example shows how to use the Board Support Package (BSP) module. In this example, when the USER button is pressed, this callback function will change the BSP state and then configure BSP indicators to the required state. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 The source code and the project file of the example are located in the following folder: examples/nrf5-sdk/bsp . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/bsp/armgcc Run make to build the example: make Programming the firmware \u00b6 After compiled, the firmware is located in bsp/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in blinky/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Test the example by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press the USER button and observe the LEDs and output of the terminal. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BSP"},{"location":"nrf5-sdk/examples/bsp/#bsp-example","text":"","title":"BSP Example"},{"location":"nrf5-sdk/examples/bsp/#description","text":"The Board Support Package (BSP) Example shows how to use the Board Support Package (BSP) module. In this example, when the USER button is pressed, this callback function will change the BSP state and then configure BSP indicators to the required state. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/bsp/#building-the-example","text":"The source code and the project file of the example are located in the following folder: examples/nrf5-sdk/bsp . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/bsp/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/examples/bsp/#programming-the-firmware","text":"After compiled, the firmware is located in bsp/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in blinky/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/bsp/#testing","text":"Test the example by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press the USER button and observe the LEDs and output of the terminal.","title":"Testing"},{"location":"nrf5-sdk/examples/bsp/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/microsd/","text":"microSD Card Example \u00b6 Description \u00b6 The microSD Card Example demonstrates the use of a microSD memory card using the SD Card library and the FatFs file system library. The example initializes the card and performs basic operations like mounting the FAT volume, listing the files, and writing the example file. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 The source code and the project file of the example are located in the following folder: examples/nrf5-sdk/fatfs . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/fatfs/armgcc Run make to build the example: make Programming the firmware \u00b6 If compiled successfully, the firmware is located in fatfs/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in fatfs/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Test the microSD Card Example application by performing the following steps: Power down the board Insert a FAT formatted microSD card into the microSD slot Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Observe the output of the terminal: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"microSD Card"},{"location":"nrf5-sdk/examples/microsd/#microsd-card-example","text":"","title":"microSD Card Example"},{"location":"nrf5-sdk/examples/microsd/#description","text":"The microSD Card Example demonstrates the use of a microSD memory card using the SD Card library and the FatFs file system library. The example initializes the card and performs basic operations like mounting the FAT volume, listing the files, and writing the example file. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/microsd/#building-the-example","text":"The source code and the project file of the example are located in the following folder: examples/nrf5-sdk/fatfs . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/fatfs/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/examples/microsd/#programming-the-firmware","text":"If compiled successfully, the firmware is located in fatfs/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in fatfs/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/microsd/#testing","text":"Test the microSD Card Example application by performing the following steps: Power down the board Insert a FAT formatted microSD card into the microSD slot Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Observe the output of the terminal:","title":"Testing"},{"location":"nrf5-sdk/examples/microsd/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/nfc/","text":"NFC Tag Example \u00b6 Description \u00b6 The NFC Tag Example demonstrates how to use the NFC tag to expose a URL record to NFC devices. When the application starts, it initializes the NFC tag and generates a URI message with a URI record containing the URL https://makerdiary.com . Then it sets up the NFC library to use the generated message and sense the external NFC field. The only events handled by the application are the NFC events. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/nfc/record_url . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/nfc/record_url/armgcc Run make to build the example: make Programming the firmware \u00b6 If compiled successfully, the firmware is located in nfc/record_url/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in nfc/record_url/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Test the NFC Tag Example with a smartphone or a tablet with NFC support by performing the following steps: Make sure that the cabled NFC PCB Antenna is connected to nRF52840 M.2 Module through the U.FL connector. Touch the NFC PCB Antenna with the smartphone or tablet and observe that GREEN LED is lit. Observe that the smartphone/tablet tries to open the URL https://makerdairy.com in a web browser. Move the smartphone/tablet away from the NFC PCB Antenna and observe that GREEN LED turns off. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"NFC Tag"},{"location":"nrf5-sdk/examples/nfc/#nfc-tag-example","text":"","title":"NFC Tag Example"},{"location":"nrf5-sdk/examples/nfc/#description","text":"The NFC Tag Example demonstrates how to use the NFC tag to expose a URL record to NFC devices. When the application starts, it initializes the NFC tag and generates a URI message with a URI record containing the URL https://makerdiary.com . Then it sets up the NFC library to use the generated message and sense the external NFC field. The only events handled by the application are the NFC events. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/nfc/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/nfc/record_url . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/nfc/record_url/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/examples/nfc/#programming-the-firmware","text":"If compiled successfully, the firmware is located in nfc/record_url/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in nfc/record_url/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/nfc/#testing","text":"Test the NFC Tag Example with a smartphone or a tablet with NFC support by performing the following steps: Make sure that the cabled NFC PCB Antenna is connected to nRF52840 M.2 Module through the U.FL connector. Touch the NFC PCB Antenna with the smartphone or tablet and observe that GREEN LED is lit. Observe that the smartphone/tablet tries to open the URL https://makerdairy.com in a web browser. Move the smartphone/tablet away from the NFC PCB Antenna and observe that GREEN LED turns off.","title":"Testing"},{"location":"nrf5-sdk/examples/nfc/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/power-profiling/","text":"Power Profiling Example \u00b6 Description \u00b6 The Power Profiling Example demonstrates how to place the board into a minimum power consumption state and perform the real-time current profiling. This example application starts up, sends the Deep Power-down (DP) instruction to the QSPI flash memory and puts the TFT LCD into sleep mode. When the USER button is pressed, the board enters the System OFF mode. The minimum current can be measured by the advanced power profiling module on M.2 Dock. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/pwr_mgmt . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/pwr_mgmt/armgcc Run make to build the example: make Programming the firmware \u00b6 If compiled successfully, the firmware is located in pwr_mgmt/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in pwr_mgmt/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 To measure the appplication current by performing the following steps: Open the terminal and install Power Profiler utility. Skip this step if Power Profiler already exists. pip3 install power-profiler Connect the debugger USB port to your PC. When the M2-DOCK drive appears, start the Power Profiler in the terminal: power-profiler The Power Profiler window will appear. Observe the current curve in the normal mode: Press the USER button to enter the System OFF mode. Observe that the current curve is sloping down: Tip See Power Profiling section for details about how to perform the real-time current profiling. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Power Profiling"},{"location":"nrf5-sdk/examples/power-profiling/#power-profiling-example","text":"","title":"Power Profiling Example"},{"location":"nrf5-sdk/examples/power-profiling/#description","text":"The Power Profiling Example demonstrates how to place the board into a minimum power consumption state and perform the real-time current profiling. This example application starts up, sends the Deep Power-down (DP) instruction to the QSPI flash memory and puts the TFT LCD into sleep mode. When the USER button is pressed, the board enters the System OFF mode. The minimum current can be measured by the advanced power profiling module on M.2 Dock. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/power-profiling/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/pwr_mgmt . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/pwr_mgmt/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/examples/power-profiling/#programming-the-firmware","text":"If compiled successfully, the firmware is located in pwr_mgmt/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in pwr_mgmt/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/power-profiling/#testing","text":"To measure the appplication current by performing the following steps: Open the terminal and install Power Profiler utility. Skip this step if Power Profiler already exists. pip3 install power-profiler Connect the debugger USB port to your PC. When the M2-DOCK drive appears, start the Power Profiler in the terminal: power-profiler The Power Profiler window will appear. Observe the current curve in the normal mode: Press the USER button to enter the System OFF mode. Observe that the current curve is sloping down: Tip See Power Profiling section for details about how to perform the real-time current profiling.","title":"Testing"},{"location":"nrf5-sdk/examples/power-profiling/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/qspi/","text":"QSPI Flash Example \u00b6 Description \u00b6 The QSPI Flash Example demonstrates the use of the QSPI peripheral with the memory mounted on nRF52840 M.2 Module. The application initializes the QSPI peripheral, sends configuration commands to memory, erases the memory, writes data, reads data, and compares data. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/qspi . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/qspi/armgcc Run make to build the example: make Programming the firmware \u00b6 If compiled successfully, the firmware is located in qspi/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in qspi/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Test the QSPI Example application by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press the RESET button, and observe the output of the terminal. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"QSPI Flash"},{"location":"nrf5-sdk/examples/qspi/#qspi-flash-example","text":"","title":"QSPI Flash Example"},{"location":"nrf5-sdk/examples/qspi/#description","text":"The QSPI Flash Example demonstrates the use of the QSPI peripheral with the memory mounted on nRF52840 M.2 Module. The application initializes the QSPI peripheral, sends configuration commands to memory, erases the memory, writes data, reads data, and compares data. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/qspi/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/qspi . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/qspi/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/examples/qspi/#programming-the-firmware","text":"If compiled successfully, the firmware is located in qspi/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in qspi/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/qspi/#testing","text":"Test the QSPI Example application by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press the RESET button, and observe the output of the terminal.","title":"Testing"},{"location":"nrf5-sdk/examples/qspi/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/rssi-viewer/","text":"RSSI Viewer Example \u00b6 Description \u00b6 The RSSI Viewer Example shows how to behave a RSSI Viewer and send RSSI data over serial port. The nRF Connect RSSI Viewer app shows dBm per frequency in the 2400-2480 MHz range, and allows the user to tweak settings like sweep delay and animation duration. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/rssi_viewer . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/rssi_viewer/armgcc Run make to build the example: make Programming the firmware \u00b6 If compiled successfully, the firmware is located in rssi_viewer/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in rssi_viewer/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Test the RSSI Viewer Example application by performing the following steps: Install the RSSI Viewer app in nRF Connect for Desktop by clicking Install . Connect to the nRF52840 M.2 Module USB port, open the RSSI Viewer app and select the USB CDC ACM port. Observe the RSSI data chart and try to tweak settings like sweep delay and animation duration. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"RSSI Viewer"},{"location":"nrf5-sdk/examples/rssi-viewer/#rssi-viewer-example","text":"","title":"RSSI Viewer Example"},{"location":"nrf5-sdk/examples/rssi-viewer/#description","text":"The RSSI Viewer Example shows how to behave a RSSI Viewer and send RSSI data over serial port. The nRF Connect RSSI Viewer app shows dBm per frequency in the 2400-2480 MHz range, and allows the user to tweak settings like sweep delay and animation duration. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/rssi-viewer/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/rssi_viewer . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/rssi_viewer/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/examples/rssi-viewer/#programming-the-firmware","text":"If compiled successfully, the firmware is located in rssi_viewer/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in rssi_viewer/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/rssi-viewer/#testing","text":"Test the RSSI Viewer Example application by performing the following steps: Install the RSSI Viewer app in nRF Connect for Desktop by clicking Install . Connect to the nRF52840 M.2 Module USB port, open the RSSI Viewer app and select the USB CDC ACM port. Observe the RSSI data chart and try to tweak settings like sweep delay and animation duration.","title":"Testing"},{"location":"nrf5-sdk/examples/rssi-viewer/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/temperature/","text":"Temperature Example \u00b6 The Temperature Example shows how to use the temperature sensor inside the nRF52840 chip and print the measurement. The application starts with configuring the temperature module and logging module. The main loop reads the temperature sensor and prints measurement every 500 milliseconds. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/temperature . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/temperature/armgcc Run make to build the example: make Programming the firmware \u00b6 If compiled successfully, the firmware is located in temperature/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in temperature/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Test the example by performing the following steps: Connect the debugger USB port and run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 In the terminal window, observe that a temperature value is printed every 500 milliseconds. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Temperature"},{"location":"nrf5-sdk/examples/temperature/#temperature-example","text":"The Temperature Example shows how to use the temperature sensor inside the nRF52840 chip and print the measurement. The application starts with configuring the temperature module and logging module. The main loop reads the temperature sensor and prints measurement every 500 milliseconds. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Temperature Example"},{"location":"nrf5-sdk/examples/temperature/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/temperature . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/temperature/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/examples/temperature/#programming-the-firmware","text":"If compiled successfully, the firmware is located in temperature/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in temperature/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/temperature/#testing","text":"Test the example by performing the following steps: Connect the debugger USB port and run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 In the terminal window, observe that a temperature value is printed every 500 milliseconds.","title":"Testing"},{"location":"nrf5-sdk/examples/temperature/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/tft-lcd/","text":"TFT LCD Display Example \u00b6 The TFT LCD Display Example shows how to use the GFX library API functions to draw graphic objects on the LCD. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/gfx . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/gfx/armgcc Run make to build the example: make Programming the firmware \u00b6 If compiled successfully, the firmware is located in gfx/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in gfx/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Test the example by performing the following steps: Program the application and observe the graphic objects on the LCD screen: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"TFT LCD Display"},{"location":"nrf5-sdk/examples/tft-lcd/#tft-lcd-display-example","text":"The TFT LCD Display Example shows how to use the GFX library API functions to draw graphic objects on the LCD. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"TFT LCD Display Example"},{"location":"nrf5-sdk/examples/tft-lcd/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/gfx . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/gfx/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/examples/tft-lcd/#programming-the-firmware","text":"If compiled successfully, the firmware is located in gfx/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in gfx/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/tft-lcd/#testing","text":"Test the example by performing the following steps: Program the application and observe the graphic objects on the LCD screen:","title":"Testing"},{"location":"nrf5-sdk/examples/tft-lcd/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/examples/usb-cdc-acm/","text":"USB CDC ACM Example \u00b6 Description \u00b6 This example demonstrates use of the USB Communication Device Class (CDC) Abstract Control Model (ACM) driver, commonly known as Virtual COM port. After connecting the nRF52840 M.2 USB, the module will enumerate as a COMx port on Windows hosts or as a /dev/ttyACMx device on Linux/Unix hosts. The port can be opened and closed just like a traditional serial port. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details. Building the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/usb_cdc_acm . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/usb_cdc_acm/armgcc Run make to build the example: make Programming the firmware \u00b6 If compiled successfully, the firmware is located in usb_cdc_acm/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in usb_cdc_acm/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module. Testing \u00b6 Test the USB CDC ACM Example application by performing the following steps: Run a terminal application like PuTTY or screen to open the debugger's virtual com port for logging: screen /dev/cu.usbmodem14102 115200 Connect the nRF52840 M.2 USB port using another USB cable, and run another terminal to open the USB CDC ACM port: screen /dev/cu.usbmodemF09F05D94F451 115200 Send test data from the second terminal to the module. Observe that the GREEN LED will blink and the debugger COM port will print the test data: Press USER Button. A test frame will be sent from the module. BLUE LED state will change. The transmitted data will display on the second terminal window as well. Note Windows 8 (and later) hosts will pick the correct driver ( usbser.sys ) automatically. If you are running Windows 7, the USB CDC ACM driver should be installed manually. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"USB CDC ACM"},{"location":"nrf5-sdk/examples/usb-cdc-acm/#usb-cdc-acm-example","text":"","title":"USB CDC ACM Example"},{"location":"nrf5-sdk/examples/usb-cdc-acm/#description","text":"This example demonstrates use of the USB Communication Device Class (CDC) Abstract Control Model (ACM) driver, commonly known as Virtual COM port. After connecting the nRF52840 M.2 USB, the module will enumerate as a COMx port on Windows hosts or as a /dev/ttyACMx device on Linux/Unix hosts. The port can be opened and closed just like a traditional serial port. Tip Before you start building, remember to set up the nRF5 SDK development environment first. See Setup the nRF5 SDK for details.","title":"Description"},{"location":"nrf5-sdk/examples/usb-cdc-acm/#building-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/nrf5-sdk/usb_cdc_acm . Open terminal and navigate to the directory with the example Makefile: cd ./examples/nrf5-sdk/usb_cdc_acm/armgcc Run make to build the example: make","title":"Building the example"},{"location":"nrf5-sdk/examples/usb-cdc-acm/#programming-the-firmware","text":"If compiled successfully, the firmware is located in usb_cdc_acm/armgcc/_build with the name nrf52840_xxaa.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command in usb_cdc_acm/armgcc to program the board: make flash_all Tip See Programming section for details about how to program the nRF52840 M.2 Module.","title":"Programming the firmware"},{"location":"nrf5-sdk/examples/usb-cdc-acm/#testing","text":"Test the USB CDC ACM Example application by performing the following steps: Run a terminal application like PuTTY or screen to open the debugger's virtual com port for logging: screen /dev/cu.usbmodem14102 115200 Connect the nRF52840 M.2 USB port using another USB cable, and run another terminal to open the USB CDC ACM port: screen /dev/cu.usbmodemF09F05D94F451 115200 Send test data from the second terminal to the module. Observe that the GREEN LED will blink and the debugger COM port will print the test data: Press USER Button. A test frame will be sent from the module. BLUE LED state will change. The transmitted data will display on the second terminal window as well. Note Windows 8 (and later) hosts will pick the correct driver ( usbser.sys ) automatically. If you are running Windows 7, the USB CDC ACM driver should be installed manually.","title":"Testing"},{"location":"nrf5-sdk/examples/usb-cdc-acm/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"python/","text":"Python on nRF52840 M.2 Developer Kit \u00b6 Overview \u00b6 The nRF52840 M.2 Developer Kit is CircuitPython-compatible and supports most of CircuitPython drivers. We are going to use a Python Interpreter firmware based on CircuitPython to run Python code here. The Python tutorials include descriptions and other reference material to ensure that everything is set up correctly. Examples are provided to help you to get started in a very short time. Why CircuitPython? CircuitPython is based on MicroPython , and features unified Python core APIs and a growing list of 150+ device libraries and drivers that work with it. For more details about CircuitPython, please visit the Adafruit CircuitPython site. Getting Started \u00b6 We think the best way to learn is by doing. And to help you get started, we have provided a series of tutorials. Find the details below: Install Python Interpreter The first Python Example: Blinky More Samples and Demos Reference \u00b6 MicroPython Adafruit CircuitPython Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Overview"},{"location":"python/#python-on-nrf52840-m2-developer-kit","text":"","title":"Python on nRF52840 M.2 Developer Kit"},{"location":"python/#overview","text":"The nRF52840 M.2 Developer Kit is CircuitPython-compatible and supports most of CircuitPython drivers. We are going to use a Python Interpreter firmware based on CircuitPython to run Python code here. The Python tutorials include descriptions and other reference material to ensure that everything is set up correctly. Examples are provided to help you to get started in a very short time. Why CircuitPython? CircuitPython is based on MicroPython , and features unified Python core APIs and a growing list of 150+ device libraries and drivers that work with it. For more details about CircuitPython, please visit the Adafruit CircuitPython site.","title":"Overview"},{"location":"python/#getting-started","text":"We think the best way to learn is by doing. And to help you get started, we have provided a series of tutorials. Find the details below: Install Python Interpreter The first Python Example: Blinky More Samples and Demos","title":"Getting Started"},{"location":"python/#reference","text":"MicroPython Adafruit CircuitPython","title":"Reference"},{"location":"python/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"python/install/","text":"Install Python Interpreter \u00b6 This section describes how to install and verify the Python Interpreter on your nRF52840 M.2 Developer Kit. Prepare the firmware \u00b6 The pre-built CircuitPython firmware for the nRF52840 M.2 Developer Kit is a .hex file. Download it into your local directory: CircuitPython 5.3.0 Install Python \u00b6 Install the Python Interpreter by performing the following steps: Connect the Debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer: Drag and drop the firmware nrf52840_m2_devkit_circuitpython_5.3.0.hex onto the M2-DOCK drive: Alternatively, you can run the following command to flash the firmware: pyocd flash -t nrf52840 nrf52840_m2_devkit_circuitpython_5.3.0.hex Tip See Programming section for more details about how to program the nRF52840 M.2 Module. Verify the firmware \u00b6 Once the Python Interpreter firmware is flashed, we can verify it by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: Start a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 In the terminal window, press any key to enter the Python REPL mode, and try some Python code: >>> print ( 'Hello, world!' ) Next steps \u00b6 Now that you have the Python Interpreter installed, it's time to explore more examples for the nRF52840 M.2 Developer Kit: Blinky Button microSD Card TFT LCD Display USB HID Keyboard BLE HID Keyboard Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Install Python Interpreter"},{"location":"python/install/#install-python-interpreter","text":"This section describes how to install and verify the Python Interpreter on your nRF52840 M.2 Developer Kit.","title":"Install Python Interpreter"},{"location":"python/install/#prepare-the-firmware","text":"The pre-built CircuitPython firmware for the nRF52840 M.2 Developer Kit is a .hex file. Download it into your local directory: CircuitPython 5.3.0","title":"Prepare the firmware"},{"location":"python/install/#install-python","text":"Install the Python Interpreter by performing the following steps: Connect the Debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer: Drag and drop the firmware nrf52840_m2_devkit_circuitpython_5.3.0.hex onto the M2-DOCK drive: Alternatively, you can run the following command to flash the firmware: pyocd flash -t nrf52840 nrf52840_m2_devkit_circuitpython_5.3.0.hex Tip See Programming section for more details about how to program the nRF52840 M.2 Module.","title":"Install Python"},{"location":"python/install/#verify-the-firmware","text":"Once the Python Interpreter firmware is flashed, we can verify it by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: Start a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 In the terminal window, press any key to enter the Python REPL mode, and try some Python code: >>> print ( 'Hello, world!' )","title":"Verify the firmware"},{"location":"python/install/#next-steps","text":"Now that you have the Python Interpreter installed, it's time to explore more examples for the nRF52840 M.2 Developer Kit: Blinky Button microSD Card TFT LCD Display USB HID Keyboard BLE HID Keyboard","title":"Next steps"},{"location":"python/install/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"python/examples/","text":"Python Examples \u00b6 Introduction \u00b6 The Python tutorials consist of several example codes and projects. The examples are organized in different levels of codes to demonstrate Python API usage \u2013 from Blinky to Bluetooth samples: Blinky Button microSD Card TFT LCD Display USB HID Keyboard BLE HID Keyboard Request an Example \u00b6 If you don't see what you're looking for, you can request an example by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request an Example","title":"Overview"},{"location":"python/examples/#python-examples","text":"","title":"Python Examples"},{"location":"python/examples/#introduction","text":"The Python tutorials consist of several example codes and projects. The examples are organized in different levels of codes to demonstrate Python API usage \u2013 from Blinky to Bluetooth samples: Blinky Button microSD Card TFT LCD Display USB HID Keyboard BLE HID Keyboard","title":"Introduction"},{"location":"python/examples/#request-an-example","text":"If you don't see what you're looking for, you can request an example by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request an Example","title":"Request an Example"},{"location":"python/examples/ble-keyboard/","text":"Bluetooth HID Keyboard Example \u00b6 Description \u00b6 The Bluetooth HID Keyboard Example demonstrates how to use the Bluetooth Low Energy HID GATT Service for a keyboard. The example code enumerates the nRF52840 M.2 Developer Kit into a Bluetooth HID keyboard that has an A key pressed by the USER button. The code depends on: adafruit_ble driver adafruit_hid driver Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter Run the code \u00b6 Run the USB HID Keyboard Example by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: The example code depends on the adafruit_ble and adafruit_hid drivers. Download and extract them into your CIRCUITPY/lib folder. This should give you the following folder structure: CIRCUITPY \u251c\u2500\u2500 boot_out.txt \u251c\u2500\u2500 code.py \u2514\u2500\u2500 lib \u251c\u2500\u2500 adafruit_ble \u2514\u2500\u2500 adafruit_hid Open the code.py file on your CIRCUITPY drive, then copy and paste the following code: import time import board import digitalio import adafruit_ble from adafruit_ble.advertising import Advertisement from adafruit_ble.advertising.standard import ProvideServicesAdvertisement from adafruit_ble.services.standard.hid import HIDService from adafruit_hid.keyboard import Keyboard from adafruit_hid.keycode import Keycode hid = HIDService () advertisement = ProvideServicesAdvertisement ( hid ) advertisement . complete_name = 'CIRCUITPY KEYBOARD' advertisement . appearance = 961 ble = adafruit_ble . BLERadio () if ble . connected : for c in ble . connections : c . disconnect () ble . start_advertising ( advertisement ) advertising = True ble_keyboard = Keyboard ( hid . devices ) button = digitalio . DigitalInOut ( board . USR_BTN ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP last_value = button . value while True : if last_value != button . value : last_value = button . value print ( 'Button is ' + ( 'released' if button . value else 'pressed' )) if ble . connected : if not button . value : ble_keyboard . press ( Keycode . A ) else : ble_keyboard . release ( Keycode . A ) Your code will run as soon as the file is done saving. A Bluetooth keyboard with the name CIRCUITPY KEYBOARD can be discovered by the host. Connect to the keyboard. Press the USER button and observe that a letter a will be sent to the host computer. Reference \u00b6 Adafruit_CircuitPython_BLE Repository Adafruit_CircuitPython_HID Repository Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE HID Keyboard"},{"location":"python/examples/ble-keyboard/#bluetooth-hid-keyboard-example","text":"","title":"Bluetooth HID Keyboard Example"},{"location":"python/examples/ble-keyboard/#description","text":"The Bluetooth HID Keyboard Example demonstrates how to use the Bluetooth Low Energy HID GATT Service for a keyboard. The example code enumerates the nRF52840 M.2 Developer Kit into a Bluetooth HID keyboard that has an A key pressed by the USER button. The code depends on: adafruit_ble driver adafruit_hid driver Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter","title":"Description"},{"location":"python/examples/ble-keyboard/#run-the-code","text":"Run the USB HID Keyboard Example by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: The example code depends on the adafruit_ble and adafruit_hid drivers. Download and extract them into your CIRCUITPY/lib folder. This should give you the following folder structure: CIRCUITPY \u251c\u2500\u2500 boot_out.txt \u251c\u2500\u2500 code.py \u2514\u2500\u2500 lib \u251c\u2500\u2500 adafruit_ble \u2514\u2500\u2500 adafruit_hid Open the code.py file on your CIRCUITPY drive, then copy and paste the following code: import time import board import digitalio import adafruit_ble from adafruit_ble.advertising import Advertisement from adafruit_ble.advertising.standard import ProvideServicesAdvertisement from adafruit_ble.services.standard.hid import HIDService from adafruit_hid.keyboard import Keyboard from adafruit_hid.keycode import Keycode hid = HIDService () advertisement = ProvideServicesAdvertisement ( hid ) advertisement . complete_name = 'CIRCUITPY KEYBOARD' advertisement . appearance = 961 ble = adafruit_ble . BLERadio () if ble . connected : for c in ble . connections : c . disconnect () ble . start_advertising ( advertisement ) advertising = True ble_keyboard = Keyboard ( hid . devices ) button = digitalio . DigitalInOut ( board . USR_BTN ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP last_value = button . value while True : if last_value != button . value : last_value = button . value print ( 'Button is ' + ( 'released' if button . value else 'pressed' )) if ble . connected : if not button . value : ble_keyboard . press ( Keycode . A ) else : ble_keyboard . release ( Keycode . A ) Your code will run as soon as the file is done saving. A Bluetooth keyboard with the name CIRCUITPY KEYBOARD can be discovered by the host. Connect to the keyboard. Press the USER button and observe that a letter a will be sent to the host computer.","title":"Run the code"},{"location":"python/examples/ble-keyboard/#reference","text":"Adafruit_CircuitPython_BLE Repository Adafruit_CircuitPython_HID Repository","title":"Reference"},{"location":"python/examples/ble-keyboard/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"python/examples/blinky/","text":"Blinky Example \u00b6 Description \u00b6 Blinky Example is a simple application which blinks an LED forever using the digitalio module. The source code shows how to configure the GPIO pin as output, then turn it on and off. The table below shows the available LEDs on the nRF52840 M.2 Developer Kit: Available LEDs Mounted on Pin Name Red LED M.2 Module P0_30 LED_RED Green LED M.2 Module P0_29 LED_GREEN Blue LED M.2 Module P0_31 LED_BLUE Green LED M.2 Dock P1_07 D13 Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter Run the code \u00b6 Run the Blinky Example by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: Open the code.py file on your CIRCUITPY drive, then copy and paste the following code: import digitalio import board import time led = digitalio . DigitalInOut ( board . D13 ) led . direction = digitalio . Direction . OUTPUT while True : led . value = True time . sleep ( 0.5 ) led . value = False time . sleep ( 0.5 ) Your code will run as soon as the file is done saving. Observe that the LED starts to blink: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Blinky"},{"location":"python/examples/blinky/#blinky-example","text":"","title":"Blinky Example"},{"location":"python/examples/blinky/#description","text":"Blinky Example is a simple application which blinks an LED forever using the digitalio module. The source code shows how to configure the GPIO pin as output, then turn it on and off. The table below shows the available LEDs on the nRF52840 M.2 Developer Kit: Available LEDs Mounted on Pin Name Red LED M.2 Module P0_30 LED_RED Green LED M.2 Module P0_29 LED_GREEN Blue LED M.2 Module P0_31 LED_BLUE Green LED M.2 Dock P1_07 D13 Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter","title":"Description"},{"location":"python/examples/blinky/#run-the-code","text":"Run the Blinky Example by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: Open the code.py file on your CIRCUITPY drive, then copy and paste the following code: import digitalio import board import time led = digitalio . DigitalInOut ( board . D13 ) led . direction = digitalio . Direction . OUTPUT while True : led . value = True time . sleep ( 0.5 ) led . value = False time . sleep ( 0.5 ) Your code will run as soon as the file is done saving. Observe that the LED starts to blink:","title":"Run the code"},{"location":"python/examples/blinky/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"python/examples/button/","text":"Button Example \u00b6 The Button Example demonstrates the use of GPIO input. The example prints a message to the console each time the state of the button changes. The table below shows the available button on the nRF52840 M.2 Developer Kit: Button Pin Name USER Button P0_19 USR_BTN / D2 The USER button is pulled up. When the button is pressed, the input level of the button pin will be low ( False ). Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter Run the code \u00b6 Run the Button Example by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: Open the code.py file on your CIRCUITPY drive, then copy and paste the following code. Your code will run as soon as the file is done saving. import board import digitalio import time button = digitalio . DigitalInOut ( board . USR_BTN ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP last_value = button . value while True : if last_value != button . value : last_value = button . value print ( 'Button is ' + ( 'released' if button . value else 'pressed' )) Start a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press the USER button and observe the output of the terminal: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Button"},{"location":"python/examples/button/#button-example","text":"The Button Example demonstrates the use of GPIO input. The example prints a message to the console each time the state of the button changes. The table below shows the available button on the nRF52840 M.2 Developer Kit: Button Pin Name USER Button P0_19 USR_BTN / D2 The USER button is pulled up. When the button is pressed, the input level of the button pin will be low ( False ). Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter","title":"Button Example"},{"location":"python/examples/button/#run-the-code","text":"Run the Button Example by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: Open the code.py file on your CIRCUITPY drive, then copy and paste the following code. Your code will run as soon as the file is done saving. import board import digitalio import time button = digitalio . DigitalInOut ( board . USR_BTN ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP last_value = button . value while True : if last_value != button . value : last_value = button . value print ( 'Button is ' + ( 'released' if button . value else 'pressed' )) Start a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press the USER button and observe the output of the terminal:","title":"Run the code"},{"location":"python/examples/button/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"python/examples/lcd/","text":"TFT LCD Display Example \u00b6 Description \u00b6 The TFT LCD Display Example shows how to use the LCD library API functions to draw graphic objects on the LCD. The table below shows the connections of each pin of the TFT LCD driver ST7789: LCD Pin nRF52840 Pin Name LCD DC P0_08 LCD_DC LCD CS P0_06 LCD_CS LCD Backlight P0_20 LCD_BL LCD Reset P1_09 LCD_RST SPI SCK P0_11 SCK SPI MOSI P0_12 MOSI Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter Run the code \u00b6 Run the TFT LCD Display Example by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: Open the code.py file on your CIRCUITPY drive, then copy and paste the following code. Your code will run as soon as the file is done saving. import board import digitalio import displayio import time from lcd import LCD displayio . release_displays () spi = board . SPI () display_bus = displayio . FourWire ( spi , command = board . LCD_DC , chip_select = board . LCD_CS , reset = board . LCD_RST ) display = LCD ( display_bus , width = 240 , height = 240 , rowstart = 80 , rotation = 90 , backlight_pin = board . LCD_BL ) Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Type something in the terminal window. Observe that the LCD will display the same thing as in the terminal: Reference \u00b6 Adafruit's displayio Guide Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"TFT LCD Display"},{"location":"python/examples/lcd/#tft-lcd-display-example","text":"","title":"TFT LCD Display Example"},{"location":"python/examples/lcd/#description","text":"The TFT LCD Display Example shows how to use the LCD library API functions to draw graphic objects on the LCD. The table below shows the connections of each pin of the TFT LCD driver ST7789: LCD Pin nRF52840 Pin Name LCD DC P0_08 LCD_DC LCD CS P0_06 LCD_CS LCD Backlight P0_20 LCD_BL LCD Reset P1_09 LCD_RST SPI SCK P0_11 SCK SPI MOSI P0_12 MOSI Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter","title":"Description"},{"location":"python/examples/lcd/#run-the-code","text":"Run the TFT LCD Display Example by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: Open the code.py file on your CIRCUITPY drive, then copy and paste the following code. Your code will run as soon as the file is done saving. import board import digitalio import displayio import time from lcd import LCD displayio . release_displays () spi = board . SPI () display_bus = displayio . FourWire ( spi , command = board . LCD_DC , chip_select = board . LCD_CS , reset = board . LCD_RST ) display = LCD ( display_bus , width = 240 , height = 240 , rowstart = 80 , rotation = 90 , backlight_pin = board . LCD_BL ) Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Type something in the terminal window. Observe that the LCD will display the same thing as in the terminal:","title":"Run the code"},{"location":"python/examples/lcd/#reference","text":"Adafruit's displayio Guide","title":"Reference"},{"location":"python/examples/lcd/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"python/examples/microsd/","text":"microSD Card Example \u00b6 Description \u00b6 The microSD Card Example demonstrates the use of a microSD memory card using the SD Card library and the FatFs file system library. The example initializes the card and performs basic operations like mounting the FAT volume, writing and reading the example file. The microSD Card is connected to the nRF52840 chip over a SPI bus. The table below shows the connections of each pin of the microSD Card: microSD Card Pin nRF52840 Pin nCS P0_07 SCLK P0_11 MOSI P0_12 MISO P1_08 Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter Run the code \u00b6 Run the microSD Card Example by performing the following steps: Power down the board Insert a FAT formatted microSD card into the microSD slot Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: Open the code.py file on your CIRCUITPY drive, then copy and paste the following code. Your code will run as soon as the file is done saving. # SD card usage import board import digitalio import sdcard import storage spi = board . SPI () cs = digitalio . DigitalInOut ( board . P7 ) sd = sdcard . SDCard ( spi , cs ) vfs = storage . VfsFat ( sd ) storage . mount ( vfs , \"/sd\" ) print ( \"microSD Card mounted.\" ) # write to sd card print ( \"Writing to file /sd/test.txt ...\" ) with open ( \"/sd/test.txt\" , \"w\" ) as f : f . write ( \"This is the written string. \\n \" ) # read from sd card print ( \"Reading from file /sd/test.txt ...\" ) with open ( \"/sd/test.txt\" , \"r\" ) as f : data = f . read () print ( data ) Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Save the code and observe the output of the terminal: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"microSD Card"},{"location":"python/examples/microsd/#microsd-card-example","text":"","title":"microSD Card Example"},{"location":"python/examples/microsd/#description","text":"The microSD Card Example demonstrates the use of a microSD memory card using the SD Card library and the FatFs file system library. The example initializes the card and performs basic operations like mounting the FAT volume, writing and reading the example file. The microSD Card is connected to the nRF52840 chip over a SPI bus. The table below shows the connections of each pin of the microSD Card: microSD Card Pin nRF52840 Pin nCS P0_07 SCLK P0_11 MOSI P0_12 MISO P1_08 Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter","title":"Description"},{"location":"python/examples/microsd/#run-the-code","text":"Run the microSD Card Example by performing the following steps: Power down the board Insert a FAT formatted microSD card into the microSD slot Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: Open the code.py file on your CIRCUITPY drive, then copy and paste the following code. Your code will run as soon as the file is done saving. # SD card usage import board import digitalio import sdcard import storage spi = board . SPI () cs = digitalio . DigitalInOut ( board . P7 ) sd = sdcard . SDCard ( spi , cs ) vfs = storage . VfsFat ( sd ) storage . mount ( vfs , \"/sd\" ) print ( \"microSD Card mounted.\" ) # write to sd card print ( \"Writing to file /sd/test.txt ...\" ) with open ( \"/sd/test.txt\" , \"w\" ) as f : f . write ( \"This is the written string. \\n \" ) # read from sd card print ( \"Reading from file /sd/test.txt ...\" ) with open ( \"/sd/test.txt\" , \"r\" ) as f : data = f . read () print ( data ) Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Save the code and observe the output of the terminal:","title":"Run the code"},{"location":"python/examples/microsd/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"python/examples/usb-keyboard/","text":"USB HID Keyboard Example \u00b6 Description \u00b6 The USB HID Keyboard Example demonstrates use of a USB Human Interface Device (HID) driver by Adafruit. The example code enumerates the nRF52840 M.2 Developer Kit into a HID keyboard that has an A key pressed by the USER button. The code depends on: adafruit_hid driver Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter Run the code \u00b6 Run the USB HID Keyboard Example by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: The example code depends on the adafruit_hid driver. Download and extract it into your CIRCUITPY/lib folder. This should give you the following folder structure: CIRCUITPY \u251c\u2500\u2500 boot_out.txt \u251c\u2500\u2500 code.py \u2514\u2500\u2500 lib \u2514\u2500\u2500 adafruit_hid \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 keyboard.py \u2514\u2500\u2500 keycode.py Open the code.py file on your CIRCUITPY drive, then copy and paste the following code: import time import board import digitalio import usb_hid from adafruit_hid.keyboard import Keyboard from adafruit_hid.keycode import Keycode usb_keyboard = Keyboard ( usb_hid . devices ) button = digitalio . DigitalInOut ( board . USR_BTN ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP last_value = button . value while True : if last_value != button . value : last_value = button . value if not button . value : print ( 'Button is pressed' ) usb_keyboard . press ( Keycode . A ) else : print ( 'Button is released' ) usb_keyboard . release ( Keycode . A ) Your code will run as soon as the file is done saving. The board will enumerate as a HID keyboard. Press the USER button and observe that a letter a will output on the host computer. Reference \u00b6 Adafruit_CircuitPython_HID Repository Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"USB HID Keyboard"},{"location":"python/examples/usb-keyboard/#usb-hid-keyboard-example","text":"","title":"USB HID Keyboard Example"},{"location":"python/examples/usb-keyboard/#description","text":"The USB HID Keyboard Example demonstrates use of a USB Human Interface Device (HID) driver by Adafruit. The example code enumerates the nRF52840 M.2 Developer Kit into a HID keyboard that has an A key pressed by the USER button. The code depends on: adafruit_hid driver Before you start coding, the Python Interpreter should be installed on the nRF52840 M.2 module correctly: Install Python Interpreter","title":"Description"},{"location":"python/examples/usb-keyboard/#run-the-code","text":"Run the USB HID Keyboard Example by performing the following steps: Connect the Module USB port to your PC as shown in the figure below. A disk drive called CIRCUITPY should be automatically detected by the computer: The example code depends on the adafruit_hid driver. Download and extract it into your CIRCUITPY/lib folder. This should give you the following folder structure: CIRCUITPY \u251c\u2500\u2500 boot_out.txt \u251c\u2500\u2500 code.py \u2514\u2500\u2500 lib \u2514\u2500\u2500 adafruit_hid \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 keyboard.py \u2514\u2500\u2500 keycode.py Open the code.py file on your CIRCUITPY drive, then copy and paste the following code: import time import board import digitalio import usb_hid from adafruit_hid.keyboard import Keyboard from adafruit_hid.keycode import Keycode usb_keyboard = Keyboard ( usb_hid . devices ) button = digitalio . DigitalInOut ( board . USR_BTN ) button . direction = digitalio . Direction . INPUT button . pull = digitalio . Pull . UP last_value = button . value while True : if last_value != button . value : last_value = button . value if not button . value : print ( 'Button is pressed' ) usb_keyboard . press ( Keycode . A ) else : print ( 'Button is released' ) usb_keyboard . release ( Keycode . A ) Your code will run as soon as the file is done saving. The board will enumerate as a HID keyboard. Press the USER button and observe that a letter a will output on the host computer.","title":"Run the code"},{"location":"python/examples/usb-keyboard/#reference","text":"Adafruit_CircuitPython_HID Repository","title":"Reference"},{"location":"python/examples/usb-keyboard/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/","text":"Zephyr OS The best-in-class RTOS for connected resource-constrained devices, built be secure and safe \u00b6 Overview \u00b6 The Zephyr OS is a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource constrained devices, and built with security in mind. Zephyr OS is open source under the Apache 2.0 license and the source code is available on GitHub . Distinguishing Features \u00b6 Zephyr offers a large and ever growing number of features including: Extensive suite of Kernel services Multiple Scheduling Algorithms Highly configurable / Modular for flexibility Cross Architecture Memory Protection Compile-time resource definition Optimized Device Driver Model Devicetree Support Native Networking Stack supporting multiple protocols Bluetooth Low Energy 5.0 support Native Linux, macOS, and Windows Development Virtual File System Interface with LittleFS and FATFS Support Powerful multi-backend logging Framework User friendly and full-featured Shell interface Settings on non-volatile storage Non-volatile storage (NVS) Native POSIX port For more details, See the Introduction to Zephyr . Getting Started \u00b6 We think the best way to learn is by doing. And to help you get started, we have provided a series of tutorials. Find the details below: Setup the Zephyr Development Environment Build and Run your first Zephyr example More Samples and Demos Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Overview"},{"location":"zephyr/#zephyr-osthe-best-in-class-rtos-for-connected-resource-constrained-devices-built-be-secure-and-safe","text":"","title":"Zephyr OSThe best-in-class RTOS for connected resource-constrained devices, built be secure and safe"},{"location":"zephyr/#overview","text":"The Zephyr OS is a scalable real-time operating system (RTOS) supporting multiple hardware architectures, optimized for resource constrained devices, and built with security in mind. Zephyr OS is open source under the Apache 2.0 license and the source code is available on GitHub .","title":"Overview"},{"location":"zephyr/#distinguishing-features","text":"Zephyr offers a large and ever growing number of features including: Extensive suite of Kernel services Multiple Scheduling Algorithms Highly configurable / Modular for flexibility Cross Architecture Memory Protection Compile-time resource definition Optimized Device Driver Model Devicetree Support Native Networking Stack supporting multiple protocols Bluetooth Low Energy 5.0 support Native Linux, macOS, and Windows Development Virtual File System Interface with LittleFS and FATFS Support Powerful multi-backend logging Framework User friendly and full-featured Shell interface Settings on non-volatile storage Non-volatile storage (NVS) Native POSIX port For more details, See the Introduction to Zephyr .","title":"Distinguishing Features"},{"location":"zephyr/#getting-started","text":"We think the best way to learn is by doing. And to help you get started, we have provided a series of tutorials. Find the details below: Setup the Zephyr Development Environment Build and Run your first Zephyr example More Samples and Demos","title":"Getting Started"},{"location":"zephyr/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/building/","text":"Build and Run your first Zephyr example \u00b6 This section details how to build and run the simple Blinky example. Before you start building, remember to set up the Zephyr development environment first: Setup Zephyr Toolchain Build the Blinky example \u00b6 Now it's ready to build your first Zephyr example. Will use the Blinky example here to keep it simple. The Blinky example shows how to blink the GREEN LED. The source code is located in examples/zephyr/blinky . Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/blinky Tip If a build system is present, make the build folder pristine before building: west build -t pristine Flash the example \u00b6 After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash After programmed, the application will run automatically. Observe that the LED will start to blink as shown in this figure: Next steps \u00b6 Check out more Zephyr examples for nRF52840 M.2 Developer Kit: Hello World Blinky Button SPI Flash FAT Filesystem LittlevGL File System Shell BLE Beacon BLE Peripheral DIS BLE Peripheral HIDs Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Build & Run a first example"},{"location":"zephyr/building/#build-and-run-your-first-zephyr-example","text":"This section details how to build and run the simple Blinky example. Before you start building, remember to set up the Zephyr development environment first: Setup Zephyr Toolchain","title":"Build and Run your first Zephyr example"},{"location":"zephyr/building/#build-the-blinky-example","text":"Now it's ready to build your first Zephyr example. Will use the Blinky example here to keep it simple. The Blinky example shows how to blink the GREEN LED. The source code is located in examples/zephyr/blinky . Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/blinky Tip If a build system is present, make the build folder pristine before building: west build -t pristine","title":"Build the Blinky example"},{"location":"zephyr/building/#flash-the-example","text":"After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash After programmed, the application will run automatically. Observe that the LED will start to blink as shown in this figure:","title":"Flash the example"},{"location":"zephyr/building/#next-steps","text":"Check out more Zephyr examples for nRF52840 M.2 Developer Kit: Hello World Blinky Button SPI Flash FAT Filesystem LittlevGL File System Shell BLE Beacon BLE Peripheral DIS BLE Peripheral HIDs","title":"Next steps"},{"location":"zephyr/building/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/setup/","text":"Setup the Zephyr Development Environment \u00b6 Set up the toolchain \u00b6 This section describes how to set up the Zephyr development environment on your system. Follow one of the following guides for your host operating system: macOS Linux Windows For more latest information, see Development Environment Setup in Zephyr\u2019s Getting Started Guide. macOS \u00b6 Follow the steps below to set up the development environment on macOS: Install the dependencies: brew install cmake ninja gperf ccache dfu-util dtc python3 Download and install the GNU ARM Embedded Toolchain . The 8-2019-q3-update version is recommended. Then set the following environment variables: Set ZEPHYR_TOOLCHAIN_VARIANT to gnuarmemb . Set GNUARMEMB_TOOLCHAIN_PATH to the toolchain installation directory. echo 'export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb' >> ~/.bash_profile echo 'export GNUARMEMB_TOOLCHAIN_PATH=\"<the toolchain installation directory>/gcc-arm-none-eabi-8-2019-q3-update\"' >> ~/.bash_profile source ~/.bash_profile Type the following in your terminal to verify if the variables are set correctly: echo $ZEPHYR_TOOLCHAIN_VARIANT echo $GNUARMEMB_TOOLCHAIN_PATH Install west to manage the combination of repositories and versions: pip3 install west Initialize west and clone the manifest repository nrf52840-m2-devkit : cd <sourcecode_root> mkdir m2devkit cd m2devkit west init -m https://github.com/makerdiary/nrf52840-m2-devkit west update The Zephyr repository contains a list of required Python modules. Install these modules by entering the following command: cd <sourcecode_root>/m2devkit pip3 install -r zephyr/scripts/requirements.txt Linux \u00b6 This guide covers Ubuntu version 18.04 LTS and later. These steps should be similar for other Linux distributions. Ensure your host system is up to date before proceeding. sudo apt update sudo apt upgrade Use apt to install dependencies: sudo apt install --no-install-recommends git cmake ninja-build gperf \\ ccache dfu-util device-tree-compiler wget \\ python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \\ make gcc gcc-multilib g++-multilib libsdl2-dev Download and install the GNU ARM Embedded Toolchain . The 8-2019-q3-update version is recommended. Then set the following environment variables: Set ZEPHYR_TOOLCHAIN_VARIANT to gnuarmemb . Set GNUARMEMB_TOOLCHAIN_PATH to the toolchain installation directory. echo 'export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb' >> ~/.bashrc echo 'export GNUARMEMB_TOOLCHAIN_PATH=\"<the toolchain installation directory>/gcc-arm-none-eabi-8-2019-q3-update\"' >> ~/.bashrc source ~/.bashrc Type the following in your terminal to verify if the variables are set correctly: echo $ZEPHYR_TOOLCHAIN_VARIANT echo $GNUARMEMB_TOOLCHAIN_PATH 3. Install west, and make sure ~/.local/bin is on your PATH environment variable: pip3 install --user -U west echo 'export PATH=~/.local/bin:\"$PATH\"' >> ~/.bashrc source ~/.bashrc Initialize west and clone the manifest repository nrf52840-m2-devkit : cd <sourcecode_root> mkdir m2devkit cd m2devkit west init -m https://github.com/makerdiary/nrf52840-m2-devkit west update The Zephyr repository contains a list of required Python modules. Install these modules by entering the following command: cd <sourcecode_root>/m2devkit pip3 install --user -r zephyr/scripts/requirements.txt Windows \u00b6 The following instructions rely on Chocolatey . If Chocolatey isn\u2019t an option, you can install dependencies from their respective websites and ensure the command line tools are on your PATH environment variable. Install chocolatey Open an Administrator cmd.exe window Disable global confirmation to avoid having to confirm installation of individual programs: choco feature enable -n allowGlobalConfirmation Use choco to install dependencies: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' choco install ninja gperf python git Open a new cmd.exe window as a regular user to continue. Install west to manage the combination of repositories and versions: pip3 install west Initialize west and clone the manifest repository nrf52840-m2-devkit : cd <sourcecode_root> mkdir m2devkit cd m2devkit west init -m https://github.com/makerdiary/nrf52840-m2-devkit west update The Zephyr repository contains a list of required Python modules. Install these modules by entering the following command: cd <sourcecode_root>/m2devkit pip3 install -r zephyr/scripts/requirements.txt Next steps \u00b6 If everything works as expected, it's ready to build and run the Zephyr examples to verify the development environment setup. The steps that are described in Build & Run a first example will walk you through verifying your setup with the simple Blinky example. Reference \u00b6 Zephyr Project: Getting Started Guide Zephyr Project: Beyond the Getting Started Guide Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Setup the toolchain"},{"location":"zephyr/setup/#setup-the-zephyr-development-environment","text":"","title":"Setup the Zephyr Development Environment"},{"location":"zephyr/setup/#set-up-the-toolchain","text":"This section describes how to set up the Zephyr development environment on your system. Follow one of the following guides for your host operating system: macOS Linux Windows For more latest information, see Development Environment Setup in Zephyr\u2019s Getting Started Guide.","title":"Set up the toolchain"},{"location":"zephyr/setup/#macos","text":"Follow the steps below to set up the development environment on macOS: Install the dependencies: brew install cmake ninja gperf ccache dfu-util dtc python3 Download and install the GNU ARM Embedded Toolchain . The 8-2019-q3-update version is recommended. Then set the following environment variables: Set ZEPHYR_TOOLCHAIN_VARIANT to gnuarmemb . Set GNUARMEMB_TOOLCHAIN_PATH to the toolchain installation directory. echo 'export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb' >> ~/.bash_profile echo 'export GNUARMEMB_TOOLCHAIN_PATH=\"<the toolchain installation directory>/gcc-arm-none-eabi-8-2019-q3-update\"' >> ~/.bash_profile source ~/.bash_profile Type the following in your terminal to verify if the variables are set correctly: echo $ZEPHYR_TOOLCHAIN_VARIANT echo $GNUARMEMB_TOOLCHAIN_PATH Install west to manage the combination of repositories and versions: pip3 install west Initialize west and clone the manifest repository nrf52840-m2-devkit : cd <sourcecode_root> mkdir m2devkit cd m2devkit west init -m https://github.com/makerdiary/nrf52840-m2-devkit west update The Zephyr repository contains a list of required Python modules. Install these modules by entering the following command: cd <sourcecode_root>/m2devkit pip3 install -r zephyr/scripts/requirements.txt","title":"macOS"},{"location":"zephyr/setup/#linux","text":"This guide covers Ubuntu version 18.04 LTS and later. These steps should be similar for other Linux distributions. Ensure your host system is up to date before proceeding. sudo apt update sudo apt upgrade Use apt to install dependencies: sudo apt install --no-install-recommends git cmake ninja-build gperf \\ ccache dfu-util device-tree-compiler wget \\ python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \\ make gcc gcc-multilib g++-multilib libsdl2-dev Download and install the GNU ARM Embedded Toolchain . The 8-2019-q3-update version is recommended. Then set the following environment variables: Set ZEPHYR_TOOLCHAIN_VARIANT to gnuarmemb . Set GNUARMEMB_TOOLCHAIN_PATH to the toolchain installation directory. echo 'export ZEPHYR_TOOLCHAIN_VARIANT=gnuarmemb' >> ~/.bashrc echo 'export GNUARMEMB_TOOLCHAIN_PATH=\"<the toolchain installation directory>/gcc-arm-none-eabi-8-2019-q3-update\"' >> ~/.bashrc source ~/.bashrc Type the following in your terminal to verify if the variables are set correctly: echo $ZEPHYR_TOOLCHAIN_VARIANT echo $GNUARMEMB_TOOLCHAIN_PATH 3. Install west, and make sure ~/.local/bin is on your PATH environment variable: pip3 install --user -U west echo 'export PATH=~/.local/bin:\"$PATH\"' >> ~/.bashrc source ~/.bashrc Initialize west and clone the manifest repository nrf52840-m2-devkit : cd <sourcecode_root> mkdir m2devkit cd m2devkit west init -m https://github.com/makerdiary/nrf52840-m2-devkit west update The Zephyr repository contains a list of required Python modules. Install these modules by entering the following command: cd <sourcecode_root>/m2devkit pip3 install --user -r zephyr/scripts/requirements.txt","title":"Linux"},{"location":"zephyr/setup/#windows","text":"The following instructions rely on Chocolatey . If Chocolatey isn\u2019t an option, you can install dependencies from their respective websites and ensure the command line tools are on your PATH environment variable. Install chocolatey Open an Administrator cmd.exe window Disable global confirmation to avoid having to confirm installation of individual programs: choco feature enable -n allowGlobalConfirmation Use choco to install dependencies: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' choco install ninja gperf python git Open a new cmd.exe window as a regular user to continue. Install west to manage the combination of repositories and versions: pip3 install west Initialize west and clone the manifest repository nrf52840-m2-devkit : cd <sourcecode_root> mkdir m2devkit cd m2devkit west init -m https://github.com/makerdiary/nrf52840-m2-devkit west update The Zephyr repository contains a list of required Python modules. Install these modules by entering the following command: cd <sourcecode_root>/m2devkit pip3 install -r zephyr/scripts/requirements.txt","title":"Windows"},{"location":"zephyr/setup/#next-steps","text":"If everything works as expected, it's ready to build and run the Zephyr examples to verify the development environment setup. The steps that are described in Build & Run a first example will walk you through verifying your setup with the simple Blinky example.","title":"Next steps"},{"location":"zephyr/setup/#reference","text":"Zephyr Project: Getting Started Guide Zephyr Project: Beyond the Getting Started Guide","title":"Reference"},{"location":"zephyr/setup/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/examples/","text":"Samples and Demos \u00b6 Introduction \u00b6 The Zephyr OS tutorials consist of several example codes and projects. The examples are organized in different levels of codes to demonstrate Zephyr API usage \u2013 from Hello World to Bluetooth samples: Hello World Blinky Button SPI Flash FAT Filesystem LittlevGL File System Shell BLE Beacon BLE Peripheral DIS BLE Peripheral HIDs Request an Example \u00b6 If you don't see what you're looking for, you can request an example by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request an Example","title":"Overview"},{"location":"zephyr/examples/#samples-and-demos","text":"","title":"Samples and Demos"},{"location":"zephyr/examples/#introduction","text":"The Zephyr OS tutorials consist of several example codes and projects. The examples are organized in different levels of codes to demonstrate Zephyr API usage \u2013 from Hello World to Bluetooth samples: Hello World Blinky Button SPI Flash FAT Filesystem LittlevGL File System Shell BLE Beacon BLE Peripheral DIS BLE Peripheral HIDs","title":"Introduction"},{"location":"zephyr/examples/#request-an-example","text":"If you don't see what you're looking for, you can request an example by submitting an issue to our GitHub Repository. We'd love to see your feedback! Request an Example","title":"Request an Example"},{"location":"zephyr/examples/ble-beacon/","text":"Bluetooth: Beacon Example \u00b6 The Bluetooth Beacon Example demonstrates the BLE Broadcaster role functionality by advertising an Eddystone URL. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain Build the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/zephyr/bluetooth/beacon . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/bluetooth/beacon Tip If a build system is present, make the build folder pristine before building: west build -t pristine Flash the example \u00b6 After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash Testing \u00b6 Test the Bluetooth Beacon Example application by performing the following steps: Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal: *** Booting Zephyr OS build zephyr-v2.2.0-727-gfc407574412a *** Starting Beacon Demo Bluetooth initialized Beacon started [ 00 :00:00.007,568 ] <inf> bt_hci_core: HW Platform: Nordic Semiconductor ( 0x0002 ) [ 00 :00:00.007,568 ] <inf> bt_hci_core: HW Variant: nRF52x ( 0x0002 ) [ 00 :00:00.007,568 ] <inf> bt_hci_core: Firmware: Standard Bluetooth controller ( 0x00 ) Version 2 .2 Build 99 [ 00 :00:00.008,117 ] <inf> bt_hci_core: Identity: f0:9f:05:d9:4f:45 ( random ) [ 00 :00:00.008,148 ] <inf> bt_hci_core: HCI: version 5 .1 ( 0x0a ) revision 0x0000, manufacturer 0x05f1 [ 00 :00:00.008,148 ] <inf> bt_hci_core: LMP: version 5 .1 ( 0x0a ) subver 0xffff Start the nRF Connect for Mobile app, scan the device and observe that the beacon is advertising an Eddystone URL ( https://makerdiary.com ) with the Device Name Test beacon . Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE Beacon"},{"location":"zephyr/examples/ble-beacon/#bluetooth-beacon-example","text":"The Bluetooth Beacon Example demonstrates the BLE Broadcaster role functionality by advertising an Eddystone URL. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain","title":"Bluetooth: Beacon Example"},{"location":"zephyr/examples/ble-beacon/#build-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/zephyr/bluetooth/beacon . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/bluetooth/beacon Tip If a build system is present, make the build folder pristine before building: west build -t pristine","title":"Build the example"},{"location":"zephyr/examples/ble-beacon/#flash-the-example","text":"After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash","title":"Flash the example"},{"location":"zephyr/examples/ble-beacon/#testing","text":"Test the Bluetooth Beacon Example application by performing the following steps: Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal: *** Booting Zephyr OS build zephyr-v2.2.0-727-gfc407574412a *** Starting Beacon Demo Bluetooth initialized Beacon started [ 00 :00:00.007,568 ] <inf> bt_hci_core: HW Platform: Nordic Semiconductor ( 0x0002 ) [ 00 :00:00.007,568 ] <inf> bt_hci_core: HW Variant: nRF52x ( 0x0002 ) [ 00 :00:00.007,568 ] <inf> bt_hci_core: Firmware: Standard Bluetooth controller ( 0x00 ) Version 2 .2 Build 99 [ 00 :00:00.008,117 ] <inf> bt_hci_core: Identity: f0:9f:05:d9:4f:45 ( random ) [ 00 :00:00.008,148 ] <inf> bt_hci_core: HCI: version 5 .1 ( 0x0a ) revision 0x0000, manufacturer 0x05f1 [ 00 :00:00.008,148 ] <inf> bt_hci_core: LMP: version 5 .1 ( 0x0a ) subver 0xffff Start the nRF Connect for Mobile app, scan the device and observe that the beacon is advertising an Eddystone URL ( https://makerdiary.com ) with the Device Name Test beacon .","title":"Testing"},{"location":"zephyr/examples/ble-beacon/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/examples/ble-dis/","text":"Bluetooth: Peripheral DIS Example \u00b6 The Peripheral DIS Example demonstrates how to use the Bluetooth Low Energy DIS (Device Information) GATT Service. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain Build the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/zephyr/bluetooth/peripheral_dis . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/bluetooth/peripheral_dis Tip If a build system is present, make the build folder pristine before building: west build -t pristine Flash the example \u00b6 After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash Testing \u00b6 Test the Peripheral DIS Example application by performing the following steps: Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal: *** Booting Zephyr OS build zephyr-v2.2.0-727-gfc407574412a *** Bluetooth initialized Advertising successfully started Start the nRF Connect for Mobile app, scan the device and connect to the device(the device is advertising as DIS peripheral ) Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE Peripheral DIS"},{"location":"zephyr/examples/ble-dis/#bluetooth-peripheral-dis-example","text":"The Peripheral DIS Example demonstrates how to use the Bluetooth Low Energy DIS (Device Information) GATT Service. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain","title":"Bluetooth: Peripheral DIS Example"},{"location":"zephyr/examples/ble-dis/#build-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/zephyr/bluetooth/peripheral_dis . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/bluetooth/peripheral_dis Tip If a build system is present, make the build folder pristine before building: west build -t pristine","title":"Build the example"},{"location":"zephyr/examples/ble-dis/#flash-the-example","text":"After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash","title":"Flash the example"},{"location":"zephyr/examples/ble-dis/#testing","text":"Test the Peripheral DIS Example application by performing the following steps: Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal: *** Booting Zephyr OS build zephyr-v2.2.0-727-gfc407574412a *** Bluetooth initialized Advertising successfully started Start the nRF Connect for Mobile app, scan the device and connect to the device(the device is advertising as DIS peripheral )","title":"Testing"},{"location":"zephyr/examples/ble-dis/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/examples/ble-hids/","text":"Bluetooth: Peripheral HIDs Example \u00b6 The Peripheral HIDs Example demonstrates how to use the Bluetooth Low Energy HID GATT Service. The report map used is for a generic mouse. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain Build the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/zephyr/bluetooth/peripheral_hids . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/bluetooth/peripheral_hids Tip If a build system is present, make the build folder pristine before building: west build -t pristine Flash the example \u00b6 After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash Testing \u00b6 Test the Peripheral HIDs Example application by performing the following steps: Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal: *** Booting Zephyr OS build zephyr-v2.2.0-727-gfc407574412a *** Bluetooth initialized [ 00 :00:00.174,438 ] <inf> fs_nvs: 4 Sectors of 4096 bytes [ 00 :00:00.174,438 ] <inf> fs_nvs: alloc wra: 0 , ff0 [ 00 :00:00.174,438 ] <inf> fs_nvs: data wra: 0 , 0dvertising successfully started [ 00 :00:00.175,994 ] <inf> bt_hci_core: HW Platform: Nordic Semiconductor ( 0x0002 ) [ 00 :00:00.176,025 ] <inf> bt_hci_core: HW Variant: nRF52x ( 0x0002 ) [ 00 :00:00.176,025 ] <inf> bt_hci_core: Firmware: Standard Bluetooth controller ( 0x00 ) Version 2 .2 Build 99 [ 00 :00:00.176,330 ] <inf> bt_hci_core: No ID address. App must call settings_load () [ 00 :00:00.178,619 ] <inf> bt_hci_core: Identity: f0:9f:05:d9:4f:45 ( random ) [ 00 :00:00.178,649 ] <inf> bt_hci_core: HCI: version 5 .1 ( 0x0a ) revision 0x0000, manufacturer 0x05f1 [ 00 :00:00.178,649 ] <inf> bt_hci_core: LMP: version 5 .1 ( 0x0a ) subver 0xffff Use a computer with Bluetooth Low Energy supported to connect the device. Here goes with macOS: Go to System Preferences -> Bluetooth Preferences , observe that the BLE HID Mouse named Test HoG mouse is found and click Connect . You will be asked for a passkey. Enter the passkey printed in the terminal, then click Connect : Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"BLE Peripheral HIDs"},{"location":"zephyr/examples/ble-hids/#bluetooth-peripheral-hids-example","text":"The Peripheral HIDs Example demonstrates how to use the Bluetooth Low Energy HID GATT Service. The report map used is for a generic mouse. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain","title":"Bluetooth: Peripheral HIDs Example"},{"location":"zephyr/examples/ble-hids/#build-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/zephyr/bluetooth/peripheral_hids . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/bluetooth/peripheral_hids Tip If a build system is present, make the build folder pristine before building: west build -t pristine","title":"Build the example"},{"location":"zephyr/examples/ble-hids/#flash-the-example","text":"After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash","title":"Flash the example"},{"location":"zephyr/examples/ble-hids/#testing","text":"Test the Peripheral HIDs Example application by performing the following steps: Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal: *** Booting Zephyr OS build zephyr-v2.2.0-727-gfc407574412a *** Bluetooth initialized [ 00 :00:00.174,438 ] <inf> fs_nvs: 4 Sectors of 4096 bytes [ 00 :00:00.174,438 ] <inf> fs_nvs: alloc wra: 0 , ff0 [ 00 :00:00.174,438 ] <inf> fs_nvs: data wra: 0 , 0dvertising successfully started [ 00 :00:00.175,994 ] <inf> bt_hci_core: HW Platform: Nordic Semiconductor ( 0x0002 ) [ 00 :00:00.176,025 ] <inf> bt_hci_core: HW Variant: nRF52x ( 0x0002 ) [ 00 :00:00.176,025 ] <inf> bt_hci_core: Firmware: Standard Bluetooth controller ( 0x00 ) Version 2 .2 Build 99 [ 00 :00:00.176,330 ] <inf> bt_hci_core: No ID address. App must call settings_load () [ 00 :00:00.178,619 ] <inf> bt_hci_core: Identity: f0:9f:05:d9:4f:45 ( random ) [ 00 :00:00.178,649 ] <inf> bt_hci_core: HCI: version 5 .1 ( 0x0a ) revision 0x0000, manufacturer 0x05f1 [ 00 :00:00.178,649 ] <inf> bt_hci_core: LMP: version 5 .1 ( 0x0a ) subver 0xffff Use a computer with Bluetooth Low Energy supported to connect the device. Here goes with macOS: Go to System Preferences -> Bluetooth Preferences , observe that the BLE HID Mouse named Test HoG mouse is found and click Connect . You will be asked for a passkey. Enter the passkey printed in the terminal, then click Connect :","title":"Testing"},{"location":"zephyr/examples/ble-hids/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/examples/blinky/","text":"Blinky Example \u00b6 Blinky is a simple application which blinks an LED forever using the GPIO API. The source code shows how to configure GPIO pins as outputs, then turn them on and off. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain Build the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/zephyr/blinky . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/blinky Tip If a build system is present, make the build folder pristine before building: west build -t pristine Flash the example \u00b6 After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash Testing \u00b6 After programmed, the application will run automatically. Observe that the LED will start to blink as shown in this figure: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Blinky"},{"location":"zephyr/examples/blinky/#blinky-example","text":"Blinky is a simple application which blinks an LED forever using the GPIO API. The source code shows how to configure GPIO pins as outputs, then turn them on and off. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain","title":"Blinky Example"},{"location":"zephyr/examples/blinky/#build-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/zephyr/blinky . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/blinky Tip If a build system is present, make the build folder pristine before building: west build -t pristine","title":"Build the example"},{"location":"zephyr/examples/blinky/#flash-the-example","text":"After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash","title":"Flash the example"},{"location":"zephyr/examples/blinky/#testing","text":"After programmed, the application will run automatically. Observe that the LED will start to blink as shown in this figure:","title":"Testing"},{"location":"zephyr/examples/blinky/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/examples/button/","text":"Button Example \u00b6 The Button Example demonstrates the use of GPIO input with interrupts. The example prints a message to the console each time a button is pressed. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain Build the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/zephyr/button . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/button Tip If a build system is present, make the build folder pristine before building: west build -t pristine Flash the example \u00b6 After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash Testing \u00b6 Test the Button Example application by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press the USER button, and observe the output of the terminal. When the button gets pressed, the interrupt handler will print an information about this event along with its timestamp. Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Button"},{"location":"zephyr/examples/button/#button-example","text":"The Button Example demonstrates the use of GPIO input with interrupts. The example prints a message to the console each time a button is pressed. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain","title":"Button Example"},{"location":"zephyr/examples/button/#build-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/zephyr/button . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/button Tip If a build system is present, make the build folder pristine before building: west build -t pristine","title":"Build the example"},{"location":"zephyr/examples/button/#flash-the-example","text":"After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash","title":"Flash the example"},{"location":"zephyr/examples/button/#testing","text":"Test the Button Example application by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press the USER button, and observe the output of the terminal. When the button gets pressed, the interrupt handler will print an information about this event along with its timestamp.","title":"Testing"},{"location":"zephyr/examples/button/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/examples/fat-fs/","text":"FAT Filesystem Example \u00b6 The FAT Filesystem Example demonstrates the use of the filesystem API and uses the FAT file system driver to mount a microSD card connected over a SPI bus. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain Build the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/zephyr/fat_fs . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/fat_fs Tip If a build system is present, make the build folder pristine before building: west build -t pristine Flash the example \u00b6 After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash Testing \u00b6 Test the FAT Filesystem Example application by performing the following steps: Power down the board Insert a FAT formatted microSD card into the microSD slot Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"FAT Filesystem"},{"location":"zephyr/examples/fat-fs/#fat-filesystem-example","text":"The FAT Filesystem Example demonstrates the use of the filesystem API and uses the FAT file system driver to mount a microSD card connected over a SPI bus. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain","title":"FAT Filesystem Example"},{"location":"zephyr/examples/fat-fs/#build-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/zephyr/fat_fs . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/fat_fs Tip If a build system is present, make the build folder pristine before building: west build -t pristine","title":"Build the example"},{"location":"zephyr/examples/fat-fs/#flash-the-example","text":"After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash","title":"Flash the example"},{"location":"zephyr/examples/fat-fs/#testing","text":"Test the FAT Filesystem Example application by performing the following steps: Power down the board Insert a FAT formatted microSD card into the microSD slot Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal:","title":"Testing"},{"location":"zephyr/examples/fat-fs/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/examples/hello-world/","text":"Hello World Example \u00b6 The Hello World Example can be used as a start point of Zephyr application development. This example is quite simple and just prints \u201cHello World\u201d to the console. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain Build the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/zephyr/hello-world . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/hello_world Tip If a build system is present, make the build folder pristine before building: west build -t pristine Flash the example \u00b6 After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash Testing \u00b6 Test the Hello World Example application by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Hello World"},{"location":"zephyr/examples/hello-world/#hello-world-example","text":"The Hello World Example can be used as a start point of Zephyr application development. This example is quite simple and just prints \u201cHello World\u201d to the console. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain","title":"Hello World Example"},{"location":"zephyr/examples/hello-world/#build-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/zephyr/hello-world . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/hello_world Tip If a build system is present, make the build folder pristine before building: west build -t pristine","title":"Build the example"},{"location":"zephyr/examples/hello-world/#flash-the-example","text":"After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash","title":"Flash the example"},{"location":"zephyr/examples/hello-world/#testing","text":"Test the Hello World Example application by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal:","title":"Testing"},{"location":"zephyr/examples/hello-world/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/examples/littlevgl/","text":"LittlevGL Example \u00b6 The LittlevGL Example demonstrates how to use the LittlevGL library API functions to draw graphic objects on the LCD. This sample application displays \u201cHello World\u201d in the center of the screen and a counter at the bottom which increments every second. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain Build the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/zephyr/lvgl . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/lvgl Tip If a build system is present, make the build folder pristine before building: west build -t pristine Flash the example \u00b6 After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash Testing \u00b6 Test the LittlevGL Example application by performing the following steps: Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal: Observe the graphic objects on the LCD screen: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"LittlevGL"},{"location":"zephyr/examples/littlevgl/#littlevgl-example","text":"The LittlevGL Example demonstrates how to use the LittlevGL library API functions to draw graphic objects on the LCD. This sample application displays \u201cHello World\u201d in the center of the screen and a counter at the bottom which increments every second. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain","title":"LittlevGL Example"},{"location":"zephyr/examples/littlevgl/#build-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/zephyr/lvgl . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/lvgl Tip If a build system is present, make the build folder pristine before building: west build -t pristine","title":"Build the example"},{"location":"zephyr/examples/littlevgl/#flash-the-example","text":"After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash","title":"Flash the example"},{"location":"zephyr/examples/littlevgl/#testing","text":"Test the LittlevGL Example application by performing the following steps: Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and observe the output of the terminal: Observe the graphic objects on the LCD screen:","title":"Testing"},{"location":"zephyr/examples/littlevgl/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/examples/shell-fs/","text":"File System Shell Example \u00b6 The File System Shell Example demonstrates shell access to a LittleFS file system partition in flash. You will be presented with a shell prompt. All file system related commands are available as sub-commands of fs . Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain Build the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/zephyr/shell/fs . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/shell/fs Tip If a build system is present, make the build folder pristine before building: west build -t pristine Flash the example \u00b6 After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash Testing \u00b6 Test the File System Shell Example application by performing the following steps: Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and You will be presented with a shell prompt. Run fs to to print the available subcommands: uart:~$ fs fs - File system commands Subcommands: cd :Change working directory ls :List files in current directory mkdir :Create directory mount :<Mount fs, syntax:- fs mount <fs type> <mount-point> pwd :Print current working directory read :Read from file rm :Remove file statvfs :Show file system state trunc :Truncate file write :Write file Try the file system related commands. For example, mount the LittleFS file system: fs mount littlefs /lfs Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"File System Shell"},{"location":"zephyr/examples/shell-fs/#file-system-shell-example","text":"The File System Shell Example demonstrates shell access to a LittleFS file system partition in flash. You will be presented with a shell prompt. All file system related commands are available as sub-commands of fs . Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain","title":"File System Shell Example"},{"location":"zephyr/examples/shell-fs/#build-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/zephyr/shell/fs . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/shell/fs Tip If a build system is present, make the build folder pristine before building: west build -t pristine","title":"Build the example"},{"location":"zephyr/examples/shell-fs/#flash-the-example","text":"After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash","title":"Flash the example"},{"location":"zephyr/examples/shell-fs/#testing","text":"Test the File System Shell Example application by performing the following steps: Connect the debugger USB port to your PC Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press RESET button, and You will be presented with a shell prompt. Run fs to to print the available subcommands: uart:~$ fs fs - File system commands Subcommands: cd :Change working directory ls :List files in current directory mkdir :Create directory mount :<Mount fs, syntax:- fs mount <fs type> <mount-point> pwd :Print current working directory read :Read from file rm :Remove file statvfs :Show file system state trunc :Truncate file write :Write file Try the file system related commands. For example, mount the LittleFS file system: fs mount littlefs /lfs","title":"Testing"},{"location":"zephyr/examples/shell-fs/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"zephyr/examples/spi-flash/","text":"SPI Flash Example \u00b6 The SPI Flash Example demonstrates the use of the QSPI peripheral with the memory mounted on nRF52840 M.2 Module. The application initializes the QSPI peripheral, erases the memory, writes data, reads data, and compares data. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain Build the example \u00b6 You can find the source code and the project file of the example in the following folder: examples/zephyr/spi_flash . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/spi_flash Tip If a build system is present, make the build folder pristine before building: west build -t pristine Flash the example \u00b6 After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash Testing \u00b6 Test the Button Example application by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press the RESET button, and observe the output of the terminal: Create an Issue \u00b6 Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"SPI Flash"},{"location":"zephyr/examples/spi-flash/#spi-flash-example","text":"The SPI Flash Example demonstrates the use of the QSPI peripheral with the memory mounted on nRF52840 M.2 Module. The application initializes the QSPI peripheral, erases the memory, writes data, reads data, and compares data. Before you start building, the Zephyr development environment should be set up correctly: Setup Zephyr Toolchain","title":"SPI Flash Example"},{"location":"zephyr/examples/spi-flash/#build-the-example","text":"You can find the source code and the project file of the example in the following folder: examples/zephyr/spi_flash . Build the example by performing the following steps: Open terminal and navigate to the m2devkit directory created in the Setup the toolchain section: cd <sourcecode_root>/m2devkit Use west to build the example: west build -b nrf52840_m2 nrf52840-m2-devkit/examples/zephyr/spi_flash Tip If a build system is present, make the build folder pristine before building: west build -t pristine","title":"Build the example"},{"location":"zephyr/examples/spi-flash/#flash-the-example","text":"After compiled successfully, the firmware is located in m2devkit/build/zephyr with the name zephyr.hex . Connect the debugger USB port to your PC using the provided USB-C Cable. A disk drive called M2-DOCK will be automatically detected by the computer. Run the following command to flash the board: west flash","title":"Flash the example"},{"location":"zephyr/examples/spi-flash/#testing","text":"Test the Button Example application by performing the following steps: Run a terminal application like PuTTY or screen : screen /dev/cu.usbmodem14102 115200 Press the RESET button, and observe the output of the terminal:","title":"Testing"},{"location":"zephyr/examples/spi-flash/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"}]}